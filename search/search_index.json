{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Informaci\u00f3 del m\u00f2dul","text":""},{"location":"#professorat","title":"Professorat","text":"<ul> <li>Paco Galera</li> </ul>"},{"location":"#programacio","title":"Programaci\u00f3","text":"<ul> <li>1r Desenvolupament d'Aplicacions Multiplataforma - Semipresencial (DAMsp)</li> <li>IES Jaume II el Just</li> <li>Tavernes de la Valldigna</li> <li>AULES</li> </ul>"},{"location":"#continguts","title":"Continguts","text":"<ol> <li>Dades simples. Instruccions seq\u00fcencials.</li> <li>Programaci\u00f3 estructurada. Disseny d'algorismes en Python.</li> <li>Introducci\u00f3 a Python.</li> <li>Estructures de control en Python.</li> <li>Introducci\u00f3 a Java.</li> <li>Arrays en Java i Python.</li> <li>Programaci\u00f3 modular. Funcions en Java.</li> <li>Programaci\u00f3 Orientada a Objectes. Classes amb atributs.</li> <li>Programaci\u00f3 Orientada a Objectes. Classes amb m\u00e8todes.</li> <li>Interf\u00edcies.</li> </ol>"},{"location":"PRG01/","title":"UD1. Dades simples. Instruccions seq\u00fcencials","text":""},{"location":"PRG01/#introduccio","title":"Introducci\u00f3","text":"<p>Un programa \u00e9s una seq\u00fc\u00e8ncia d\u2019instruccions que manipulen unes dades per a obtindre uns resultats.</p> <p>Eixes instruccions s\u00f3n ordres que li fem a l\u2019ordinador. Per a aix\u00f2 cal dir-li-ho en el llenguatge que ent\u00e9n, que \u00e9s el llenguatge m\u00e0quina, compost per seq\u00fc\u00e8ncies de 0s i 1s, igual que tota la informaci\u00f3 que es guarda en un ordinador (n\u00fameros, text, fotos, m\u00fasica, jocs, pel\u00b7l\u00edcules...):</p> <p>Per\u00f2 com per a nosaltres (els humans) ens resulta molt dif\u00edcil, li ho direm en altre llenguatge. Comen\u00e7arem amb Python i m\u00e9s avant vorem Java.</p> <p>En este tema vorem les dades que s\u00f3n manipulades pels programes.</p>"},{"location":"PRG01/#dades-simples","title":"Dades simples","text":"<p>Una dada \u00e9s qualsevol informaci\u00f3 amb la qual treballa un algorisme.</p> <p>Cada dada \u00e9s d'un tipus determinat que, b\u00e0sicament, ser\u00e0 enter, real, car\u00e0cter o l\u00f2gic, per\u00f2 que dependr\u00e0 del llenguatge de programaci\u00f3 en qu\u00e8 estem treballant.</p> <p>Les dades apareixen en un programa en una de les seg\u00fcents formes:</p> <ul> <li>variables</li> <li>constants (simb\u00f2liques i literals)</li> </ul>"},{"location":"PRG01/#variables","title":"Variables","text":"<p>Una variable \u00e9s un lloc on podem guardar una dada.</p> <p></p> <p>La imatge representa la variable edat, que guarda el valor 17. Cada variable es caracteritza per tindre:</p> <ul> <li>Un nom (edat) i un tipus (enter), que s'han d'especificar quan es defineix la variable en un programa, amb una instrucci\u00f3 declarativa (encara que hi ha llenguatges, com Python, que no cal indicar el tipus).</li> <li>Un valor (17), que li s'assignar\u00e0 en alguna instrucci\u00f3 d'assignaci\u00f3 (o b\u00e9 en la mateixa instrucci\u00f3 declarativa) i que podr\u00e0 ser canviat per altre valor les voltes que calga.</li> </ul> <p>Les variables s'emmagatzemen a la mem\u00f2ria RAM, de forma que:</p> <p></p> <ul> <li>El nom (edat) representa l'adre\u00e7a de la RAM on est\u00e0 el valor.</li> <li>El tipus (enter) especifica la quantitat de bytes necessaris per guardar un valor (4).</li> <li>El valor \u00e9s el contingut (17).</li> </ul> Exemple<pre><code>// instrucci\u00f3 declarativa\nint edat; // Definim una variable, de nom 'edat' i de tipus 'enter'     \n\n// instruccions d'assignaci\u00f3\nedat = 17;          // Donem valor '17' a la variable edat\nllig(edat);         // Assignem per teclat un valor a edat. Per exemple 19\nedat = edat + 3;    // Tornem a canviar el valor. Ara valdr\u00e0 22\nedat = 23.5;        // ERROR! Per qu\u00e8?\n\n// utilitzaci\u00f3 de la variable\nescriu(edat);       // Escrivim en pantalla el valor de la variable edat\n</code></pre> <p>Nota</p> <p>M\u00e9s endavant veurem estes instruccions detalladament</p>"},{"location":"PRG01/#constants","title":"Constants","text":"<p>Una constant \u00e9s com una variable per\u00f2 que el valor no canvia durant l'execuci\u00f3 del programa.</p> <p>Les constants poden apar\u00e9ixer en forma de literals o b\u00e9 amb nom (constants simb\u00f2liques):</p> <p> SIMB\u00d2LIQUES LITERALS MAX_EDAT 99 PI 3.1416 VALOR_EURO 166.386 NOM_INSTITUT \"Jaume II el Just\" CICLES_INFORMATICA true MAJORIA_EDAT 18 <p></p> <p>Les constants simb\u00f2liques, igual que les variables, tenen un valor concret que se li d\u00f3na al principi del programa per\u00f2, com ja hem dit, no poden canviar de valor.</p> <p>Les constants literals alfanum\u00e8riques han d'expressar-se tancades entre cometes.</p>"},{"location":"PRG01/#expressions","title":"Expressions","text":"<p>Les constants i variables no apareixen a\u00efllades, sin\u00f3 formant part d'expressions. Una expressi\u00f3 \u00e9s un c\u00e0lcul necessari per a obtindre un resultat.</p> <p>Una expressi\u00f3 \u00e9s una combinaci\u00f3 d'operands units mitjan\u00e7ant operadors.</p> <ul> <li>Els operands poden ser de diferents tipus:<ul> <li>Literals: \"Jaume II el Just\", 100</li> <li>Constants: PI</li> <li>Variables: edat</li> <li>Funcions: arrel(100), longitut(nom)</li> </ul> </li> <li>Els operadors els vorem en altre apartat</li> </ul> Exemples d'expressions <ul> <li> <p>Num\u00e8riques:</p> <ul> <li>edat</li> <li>5</li> <li>2 * PI * quadrat(radi)</li> <li>(-b+arrel(quadrat(b)-(4ac)))/(2*a)</li> </ul> </li> <li> <p>Alfanum\u00e8riques:</p> <ul> <li>\"Neus\"</li> <li>\"Miquel\" + \"Garcia\" + \"Marqu\u00e9s\"</li> </ul> </li> <li> <p>L\u00f2giques:</p> <ul> <li>true</li> <li>false</li> <li>valor1 &lt; valor2</li> <li>(valor1 &lt; valor2)&amp;&amp;(valor2 &lt;valor3)</li> </ul> </li> </ul>"},{"location":"PRG01/#operadors","title":"Operadors","text":"<p>S\u00f3n els s\u00edmbols de les operacions amb els quals es construeixen les expressions.</p> <p>Depenent del tipus de dades dels operands o del tipus del resultat, tenim uns tipus d'operadors: aritm\u00e8tics, l\u00f2gics, relacionals i alfanum\u00e8rics.</p>"},{"location":"PRG01/#operadors-aritmetics","title":"Operadors aritm\u00e8tics","text":"<p>S\u00f3n les operacions matem\u00e0tiques. Les variables o constants que hi intervenen s\u00f3n num\u00e8riques (enters o reals) i el resultat tamb\u00e9. Els m\u00e9s usuals s\u00f3n:</p> <p> OPERADOR SIGNIFICAT ^ Exponenciaci\u00f3 * Producte / Divisi\u00f3 % Residu de divisi\u00f3 entera + Suma - Resta <p></p>"},{"location":"PRG01/#regles-de-prioritat","title":"Regles de prioritat","text":"<p>Les expressions que tenen 2 o m\u00e9s operands necessiten unes regles que permeten determinar en quin ordre s'avaluen. Per exemple, si escrivim <code>escriu(2*5-3);</code> qu\u00e8 mostrar\u00e0? 7 o 4? La resposta \u00e9s 7, ja que les regles de prioritat indiquen que l'operador del producte t\u00e9 m\u00e9s prioritat que el de la resta, com veiem a la taula:</p> <p> OPERADOR PRIORITAT ^ ALTA *  /  % | +  - BAIXA <p></p> <p>Si dos operadors d'igual prioritat coincideixen en una mateixa expressi\u00f3, s'avaluen d'esquerra a dreta. Per\u00f2 si volgu\u00e8rem canviar l'ordre d'avaluaci\u00f3 en una expressi\u00f3, utilitzarem els par\u00e8ntesi necessaris. A banda, \u00e9s recomanable l'\u00fas de par\u00e8ntesis davant del dubte.</p>"},{"location":"PRG01/#operadors-relacionals","title":"Operadors relacionals","text":"<p>Serveixen per a comparar 2 expressions, retornant un valor l\u00f2gic: vertader o fals.</p> <p> OPERADOR SIGNIFICAT &lt; Menor &gt; Major == Igual != Distint &lt;= Menor o igual &gt;= Major o igual <p></p> Exemples d'expressions l\u00f2giques <p> Si x = 10 i y = 20: EXPRESSI\u00d3 VALOR (x + y) &lt; 20 false (y - x) &lt;= x true (y - x) &gt;= x true x == y false x != y true 'c' &lt; 'f' true * <p>* Tamb\u00e9 podem comparar car\u00e0cters (van entre cometes)</p> <p></p>"},{"location":"PRG01/#operadors-logics","title":"Operadors l\u00f2gics","text":"<p>Els operadors l\u00f2gics s\u00f3n NO, I i O. Per\u00f2 per seguir la nomenclatura est\u00e0ndard dels algorismes utilitzarem els noms anglesos: NOT, AND i OR. Act\u00faen sobre operands o expressions l\u00f2giques i el resultat tamb\u00e9 \u00e9s un valor l\u00f2gic, que ve donat per les corresponents taules de veritat*, on V \u00e9s Vertader (true) i F \u00e9s Fals (false):</p> <p> x NOT x F V V F x y x AND y F F F F V F V F F V V V x y x OR y F F F F V V V F V V V V <p></p> Exemples <p><code>NOT (3 &lt; 5)</code> -&gt; F</p> <p><code>(3 &lt; 5) AND (4 &lt; 2)</code> -&gt; F</p> <p><code>(3 &lt; 5) OR (4 &lt; 2)</code> -&gt; V</p> <p>Expressions sin\u00f2nimes</p> <p> NOT(a &lt; b) a &gt;= b NOT(a &lt;= b) a &gt; b NOT(a + b == 0) a + b != 0 Compte! No canvien els operandors aritm\u00e8tics NOT(true) false NOT(false) true NOT(jubilat == true) NOT(jubilat) jubilat == false NOT(jubilat == false) jubiat == true jubilat <p></p>"},{"location":"PRG01/#lleis-de-de-morgan","title":"Lleis de De Morgan","text":"<p>S\u00f3n regles que permeten transformar expressions l\u00f2giques en altres equivalents. S\u00f3n molt \u00fatils per a simplificar expressions condicionals. Concretament, transformen expressions formades amb un NOT sobre alguna expressi\u00f3 que t\u00e9 dins algun AND, OR o NOT.</p>"},{"location":"PRG01/#1a-llei-de-de-morgan","title":"1a llei de De Morgan","text":"<p><code>NOT(A AND B)</code> \u00e9s equivalent a <code>NOT(A) OR NOT(B)</code></p> Exemple <p>Si A \u00e9s Plou, i B \u00e9s Fa fred:</p> <p><code>NOT(A AND B)</code> significa No \u00e9s cert que ploga i fa\u00e7a fred alhora. Aix\u00f2, segons esta llei, \u00e9s equivalent a dir: <code>NOT(A) OR NOT(B)</code>, que significa No plou o no fa fred. Veiem-ho d'una altra forma, amb les variables plou i fred:</p> <p><code>NOT(plou AND fred) -&gt; NOT(plou) OR NOT(fred)</code></p> <p>\u00c9s a dir, tinguen els valors que tinguen plou i fred (verdader o fals), sempre tindrem el mateix resultat en les 2 expressions equivalents. Comprovem-ho amb la taula de veritat:</p> <p> p(plou) f(fred) p AND f NOT(p AND f) NOT(p) NOT(f) NOT(p) OR NOT(f) V V V F F F F V F F V F V V F V F V V F V F F F V V V V <p></p>"},{"location":"PRG01/#2a-llei-de-de-morgan","title":"2a llei de De Morgan","text":"<p><code>NOT(A OR B)</code> \u00e9s equivalent a <code>NOT(A) AND NOT(B)</code></p> Exemple <p>Si A \u00e9s Plou, i B \u00e9s Fa fred:</p> <p><code>NOT(A OR B)</code> significa No \u00e9s cert que: ploga o fa\u00e7ca fred. Aix\u00f2, segons esta llei, \u00e9s equivalent a dir: <code>NOT(A) AND NOT(B)</code>, que significa No plou i no fa fred. Veiem-ho ara amb les variables plou i fred:</p> <p><code>NOT(plou OR fred) -&gt; NOT(plou) AND NOT(fred)</code></p> <p>\u00c9s a dir, tinguen els valors que tinguen plou i fred (verdader o fals), sempre tindrem el mateix resultat en les 2 expressions equivalents. Comprovem-ho amb la taula de veritat:</p> <p> p(plou) f(fred) p OR f NOT(p OR f) NOT(p) NOT(f) NOT(p) AND NOT(f) V V V F F F F V F V F F V F F V V F V F F F F F V V V V <p></p>"},{"location":"PRG01/#3a-llei-de-de-morgan","title":"3a llei de De Morgan","text":"<p><code>NOT(NOT(A))</code> \u00e9s equivalent a <code>A</code></p> Exemple <p>Dir que No \u00e9s cert que no plou \u00e9s el mateix que dir que plou.</p> <p>Com aplicar estes lleis quan el NOT act\u00faa sobre m\u00e9s d'un operador l\u00f2gic?</p> <p>Per exemple:</p> <p><code>NOT(plou AND NOT(fred) AND sol AND humitat)</code></p> <p>Caldria:</p> <ul> <li>Llevar el NOT que abarca tota l'expressi\u00f3.</li> <li>Canviar els AND per OR i al rev\u00e9s.</li> <li>Posar un NOT a cada part.</li> </ul> <p>\u00c9s a dir:</p> <p><code>(NOT(plou) OR NOT(NOT(fred)) OR NOT(sol) OR NOT(humanitat))</code></p> <p>I, aplicant la llei de la doble negaci\u00f3, quedaria:</p> <p><code>NOT(plou) OR fred OR NOT(sol) OR NOT(humitat)</code></p> <p>Compte! Si en l'expressi\u00f3 que abarca el NOT hi ha ORs i ANDs (les 2 coses alhora), cal anar en compte en transformaci\u00f3, ja que, com anem a vore a continuaci\u00f3, l'AND \u00e9s m\u00e9s prioritari que l'OR. La soluci\u00f3 seria, abans de fer la transformaci\u00f3, posar els par\u00e8ntesis que calguen, i despr\u00e9s ja fer la transformaci\u00f3 conservant els par\u00e8ntesis.</p> <p>Per exemple, si tenim:</p> <p><code>NOT(plou AND fred OR sol)</code></p> <p>Primer posarem par\u00e8ntesis per tindre una soluci\u00f3 equivalent. Com l'AND \u00e9s m\u00e9s prioritari que l'OR, posarem els par\u00e9ntesi aix\u00ed:</p> <p><code>NOT((plou AND fred) OR sol)</code></p> <p>Ara ja apliquem les lleis de De Morgan, conservant els par\u00e8ntesis de dins:</p> <p><code>(NOT(plou) OR NOT(fred)) AND NOT(sol)</code></p>"},{"location":"PRG01/#regles-de-prioritat_1","title":"Regles de prioritat","text":"<p>Com els operadors l\u00f2gics i relacionals poden formar expressions juntament amb els aritm\u00e8tics, tamb\u00e9 necessitem unes regles de prioritat per a saber quins operadors s'avaluen primer.</p> <p> OPERADOR PRIORITAT NOT ALTA ^ | *, /, % | +, - | &lt;, &gt;, &lt;=, &gt;= | ==, != | AND V OR BAIXA <p></p> <p>Estes regles s\u00f3n bastant est\u00e0ndards per\u00f2 podria dependre de cada llenguatge de programaci\u00f3.</p> <p>No obstant, davant el dubte, sempre podem (i devem) emprar els par\u00e8ntesis.</p>"},{"location":"PRG01/#funcions","title":"Funcions","text":"<p>S\u00f3n trossos de codi que podem utilitzar en els nostres programes. Hi ha de 2 tipus: predefinides i definides per l'usuari.</p>"},{"location":"PRG01/#funcions-predefinides","title":"Funcions predefinides","text":"<p>Els llenguatges de programaci\u00f3 tenen funcions predefinides amb les quals podem dur a terme les tasques m\u00e9s usuals. Les funcions (igual que en les de les matem\u00e0tiques) solen rebre un o m\u00e9s arguments i retornen un valor que anoomenem resultat.</p> <p>Per exemple, per a mostrar coses per pantalla tenim:</p> <ul> <li><code>printf(\"Hola\");</code> en llenguatge C</li> <li><code>System.out.println(\"Hola\");</code> en llenguatge Java</li> <li><code>escriu(\"Hola\")</code> forma que emprarem en algorismes</li> </ul>"},{"location":"PRG01/#funcions-definides-per-lusuari","title":"Funcions definides per l'usuari","text":"<p>Podem crear funcions i usar-les en diferens parts del programa:</p> Exemple de funci\u00f3<pre><code>    Programa principal{\n        escriu(\"L'\u00e0rea del  triangle de base 2 i altura 4 \u00e9s:\");\n        area = areaTriangle(2, 4);\n        escriu(area);\n        escriu(\"L'\u00e0rea del triangle de base 3 i altura 6 \u00e9s:\" + areaTriangle(3, 6));\n    }\n\n    // -------------------------------------------------\n\n    funci\u00f3 areaTriangle(base: enter, altura: enter){\n        area real;\n        area = base * altura / 2;\n        retorna area;\n    }\n</code></pre> <p>Ja vorem en detall l'\u00fas de funcions m\u00e9s endavat...</p>"},{"location":"PRG01/#activitats","title":"Activitats","text":"Activitat 1 <p>Calcula el valor de cada expressi\u00f3 si \u00e9s v\u00e0lida. Si no \u00e9s v\u00e0lida, indica el motiu.</p> <p>a. 10 * 3 + 5 * 2</p> <p>b. 15 % 4</p> <p>c. 2 + 7 / 3</p> <p>d. 4 + \"preu\"</p> <p>e. (5 + 2) &lt; 8</p> <p>f. 4 &gt;= 4</p> <p>g. true OR false</p> <p>h. 5 OR (2 &lt; 3)</p> <p>i. (6 &gt;= 2) OR (3 &lt;= 5)</p> <p>j. NOT(NOT(NOT(4 &lt; 10&gt;)))</p> <p>k. 4 + false</p> <p>l. 4 + 2 * 4 / 2</p> <p>m. ((5 &lt; 0) AND (6 &gt;= 7)) OR (45 % 5 &lt;= 0)</p> <p>n. ((10 - 4) &gt; 0) OR true</p> <p>o. ((10 - 4) &lt; 0) OR true</p> Activitat 2 <p>Donats els seg\u00fcents valors de les variables X = 1, Y = 4, Z = 10 i la constant PI = 3.14, avalua les expressions seg\u00fcents:</p> <p>a. <code>2 * X + 0.5 * Y - 1 / 5 * Z</code></p> <p>b. <code>((PI * X ^ 2) &gt; Y) OR ((2 * PI * X) &lt;= Z)</code></p> <p>c. <code>\"Hola, m\u00f3n!\" == \"Hola,\" + \"m\u00f3n!\"</code></p> <p>d. <code>'a' == 'A'</code></p> Activitat 3 <p>Construeix expressions correctes per a les f\u00f3rmules seg\u00fcents:</p> <p></p> Activitat 4 <p>A partir de les seg\u00fcents constants:</p> <ul> <li>gran = fals</li> <li>red\u00f3 = cert</li> <li>suau = fals</li> </ul> <p>...indica quin ser\u00e0 el valor de les seg\u00fcents expressions:</p> <p>a. gran i red\u00f3 i suau;</p> <p>b. gran o red\u00f3 o suau;</p> <p>c. gran i red\u00f3 o suau;</p> <p>d. gran o red\u00f3 i suau;</p> <p>e. gran i (red\u00f3 o suau);</p> <p>f. (gran o red\u00f3) i suau;</p> Activitat 5 <p>Indica amb par\u00e8ntesis l'ordre en qu\u00e8 l'ordinador executaria les diferents operacions:</p> <p>a. x + y + z</p> <p>b. x * y + z</p> <p>c. x + y * z</p> <p>d. x - y * z</p> <p>e. x + y / z</p> <p>f. x * y / z</p> <p>g. x / y / z</p> <p>h. x / y * y + x % y</p> <p>i. x / y + z + x</p> Activitat 6 <p>Tranforma les seg\u00fcents expressions en altres equivalents utilitzant les lleis de De Morgan. Cal tindre en compte que a, b, c s\u00f3n variables enteres i p, q, r s\u00f3n variables booleanes (l\u00f2giques).</p> <p>a. <code>NOT((p AND q) OR r)</code></p> <p>b. <code>NOT((a == b) OR (a == 0))</code></p> <p>c. <code>NOT(NOT p OR NOT q OR (a == b + c))</code></p> <p>d. <code>NOT(p AND (q OR r))</code></p> <p>e. <code>NOT((a &lt; b) AND (b &lt; c))</code></p> <p>f. <code>NOT(NOT p AND q OR NOT r)</code></p> <p>g. <code>NOT(NOT(a != b) OR (a + b == 7))</code></p> <p>h. <code>NOT((a / b == 0) OR (a == c))</code></p> Activitat 7 <p>Donats els valors inicials de les seg\u00fcents variables enteres i l\u00f2giques:</p> <p><code>a = 3; b = 5; c = 7; p = cert; q = fals;</code></p> <p>... indica els valors que tindran estes variables despr\u00e9s de les seg\u00fcents assignacions.</p> <p>NOTA: en cada apartat es tindr\u00e0 en compte els canvis de les variables dels apartats anteriors.</p> <p>a. <code>a = 3 * b</code></p> <p>b. <code>b = a + c</code></p> <p>c. <code>p = p and (c &gt; b)</code></p> <p>d. <code>q = p or q</code></p> <p>e. <code>r = a == b</code></p> <p>f. <code>a = a + 1</code></p> <p>g. <code>b = b - 2</code></p> <p>h. <code>a = a</code></p> <p>i. <code>b = b / 2 + c % 3</code></p> Activitat 8 <p>Sent a, b, c i d variables num\u00e8riques, escriu l'expressi\u00f3 l\u00f2gica corresponent a:</p> <p>a. Els valors de b i c s\u00f3n tots dos superiors al valor de d</p> <p>b. a, b i c s\u00f3n id\u00e8ntics</p> <p>c. a, b i c s\u00f3n id\u00e8ntics per\u00f2 diferents de d</p> <p>d. b est\u00e0 compr\u00e9s, estrictament, entre els valors de a i c</p> <p>e. b est\u00e0 comrpr\u00e9s, estrictament, entre els valors de a i c, i el valor de a \u00e9s m\u00e9s xicotet que el valor de c</p> <p>f. Hi ha, com a m\u00ednim, dos valors id\u00e8ntics entre a, b i c</p> <p>g. Hi ha dos valors id\u00e8ntics entre a, b i c, i nom\u00e9s dos</p> <p>h. Hi ha, com a m\u00e0xim, dos valors id\u00e8ntics entre a, b i c</p> Activitat 9 <p>Escriu l'expressi\u00f3 algor\u00edsmica de les seg\u00fcents expressions:</p> <p>a. Avaluar si el contingut d'una variable num\u00e8rica \u00e9s divisible per 10 o per 7</p> <p>b. Avaluar si una variable preu no \u00e9s menor de 100\u00bd ni major de 200\u20ac</p> Activitat 10 <p>Si DN, MN, AN representen el dia, mes i any d'una persona i DA, MA, AA el dia, mes i any actuals, expresssa amb una expressi\u00f3 si la persona ha complit 18 anys.</p> Activitat 11 <p>En un algorisme que analitza els resultats d'ex\u00e0mens, hi ha 5 variables definides:</p> Java<pre><code>char opcio;             // Tipus d'alumne: (C)i\u00e8ncies o (L)letres\nint nl, nv, nm, nf;     // Notes de literatura, valenci\u00e0, mate i f\u00edsica d'un alumne\n</code></pre> <p>Totes les notes estan calculades sobre 10 i tenen el mateix pes per a fer la mitjana.</p> <p>Escriu les expressions l\u00f2giques corresponents a:</p> <p>a. La mitjana de les quatre notes \u00e9s superior a 5</p> <p>b. Les notes de mate i valenci\u00e0 s\u00f3n superiors a la mitjana de les quatre notes</p> <p>c. Hi ha, com a m\u00ednim, una nota superior a 5</p> <p>d. Totes les notes s\u00f3n superiors a 5</p> <p>e. La mitjana de les quatre notes \u00e9s superior o igual a 5, i la mitjana de les notes de l'opci\u00f3 que ha agafat l'alumne tamb\u00e9</p>"},{"location":"PRG02/","title":"UD2. Programaci\u00f3 estructurada. Disseny d'algorismes en Python","text":""},{"location":"PRG02/#concepte-de-programacio-estructurada","title":"Concepte de programaci\u00f3 estructurada","text":"<p>\u00c9s unconjunt de t\u00e8cniques de programaci\u00f3 que incorporen:</p> <ul> <li>Disseny descendent: t\u00e8cnica consistent en descompondre successivament accions complexes en accions m\u00e9s simples. Divideix i vencer\u00e0s. Funcions.</li> <li>Estructures de control: descriuen el flux d'execuci\u00f3 d'una successi\u00f3 d'accions:<ul> <li>Seq\u00fcencial: s'executen les ordres de dalt cap a baix.</li> <li>Bifurcaci\u00f3: executar un o altre conjunt d'instruccions, depenent d'alguna condici\u00f3.</li> <li>Repetici\u00f3 (o bucle): repetir un conjunt d'instruccions mentre es complisca una condici\u00f3.</li> </ul> </li> </ul>"},{"location":"PRG02/#algorismes","title":"Algorismes","text":"<p>Igual que abans de fer una casa conv\u00e9 primer fer els pl\u00e0nols, per a fer un programa (mitjanament llarg) cal descriure els passos a fer, independentment del llenguatge de programaci\u00f3 que es vol utilitzar. Eixe conjunt de passos vindria a ser l'algorisme. Veiem una definici\u00f3 formal.</p>"},{"location":"PRG02/#que-es-un-algorisme","title":"Qu\u00e8 \u00e9s un algorisme?","text":"<p>\u00c9s una descripci\u00f3 clara i no ambigua de les accions necess\u00e0ries per a solucionar un problema en un ordre determinat. \u00c9s com un programa per\u00f2 no est\u00e0 escrit en cap llenguatge de programaci\u00f3 en concret. Serveix per a indicar els distints passos que ha de tindre el programa sense entrar en detall.</p>"},{"location":"PRG02/#quins-elements-te-un-algorisme","title":"Quins elements t\u00e9 un algorisme?","text":"<ul> <li>Instruccions: d'entrada, d'eixida i d'assignaci\u00f3.</li> <li>Estructures de control: bifurcacions i repeticions.</li> </ul>"},{"location":"PRG02/#com-es-fa-un-algorisme","title":"Com es fa un algorisme?","text":"<p>Per expressar un algorisme es poden utilitzar diverses metodologies. Estes s\u00f3n les m\u00e9s comunes:</p> <ul> <li>Llenguatge natural o informal: com en una recepta de cuina.</li> <li>Pseudocodi: combinaci\u00f3 entre llenguatge natural i llenguatge de programaci\u00f3.</li> <li>Ordinograma (diagrama de flux): representaci\u00f3 gr\u00e0fica on hi ha uns s\u00edmbols (accions) units per fletxes (que indiquen l'ordre d'execuci\u00f3).</li> </ul> Exemple <p>Volem fer un programa que calcule l'\u00e0rea d'un cercle a partir del radi que s'introduir\u00e0 per teclat (si el radi no \u00e9s negatiu).</p> <p>Independentment del llenguatge que utilitzarem, podem descriure els passos que caldria fer. Veiem com seria l'algorisme en cadascuna de les 3 metodologies:</p> <p>LLENGUATGE NATURAL O INFORMAL:</p> <ol> <li>Demanar el radi per teclat.</li> <li>Si el radi \u00e9s positiu, calcular l'\u00e0rea i mostrar-la.</li> <li>Si no, mostrar un missatge d'error.</li> </ol> <p>PSEUDOCODI:</p> <pre><code>Algortimo areaCercleOK\n    Escribir \"Dis-me el radi:\"\n    Leer radi\n    si radi &gt; 0 Entonces\n        area = 3.14 * radi * radi\n        Escribir \"Area = \", area\n    Sino\n        Escribir \"Radi incorrecte\"\n    FinSi\nFinAlgoritmo\n</code></pre> <p>Podem usar qualsevol altre nom per a les accions (en compte d'escribir, leer, etc...)</p> <p>Per\u00f2 ac\u00ed s'han usat eixos noms perqu\u00e8 \u00e9s la sintaxi que usa l'aplicaci\u00f3 Pseint (pseudo int\u00e8rpret d'algorismes), on podrem executar els algorismes (per si volgu\u00e9rem comprovar-ne el resultat).</p> <p>PSEINT</p> <p>ORDINOGRAMA (DIAGRAMA DE FLUX):</p> <p></p> <p>Amb PSeInt podem construir f\u00e0cilment este ordinograma a base d'anar posant eixes \"caixetes\". Tamb\u00e9 podrem executar-lo.</p> <p>PSeInt tamb\u00e9 permet convertir un ordinograma a pseudocodi (o un pseudocodi a ordinograma). I tamb\u00e9 podem exportar l'algorisme a un fitxer en Python a altre llenguatge.</p>"},{"location":"PRG02/#qualitat-dun-algorisme","title":"Qualitat d'un algorisme","text":"<p>Per a resoldre un problema determinat hi pot haver infinitat d'algorismes. La qualitat d'un algorisme dep\u00e9n de:</p> <ul> <li>Correctesa: l'algorisme ha de produir el resultat correcte per a tots els inputs possibles.</li> <li>Efici\u00e8ncia: cal minimitzar els recursos de temps i mem\u00f2ria. Sobretot per a dades d'entrada \"grans\".</li> <li>Senzillesa: l'algorisme ha de ser el m\u00e9s senzill possible, sempre que siga f\u00e0cil d'entendre i modificar.</li> </ul> <p>Estes qualitats ajuden a assegurar que un algorisme no nom\u00e9s resol el problema plantejat, sin\u00f3 que tamb\u00e9 ho fa de manera fiable, eficient i clara.</p>"},{"location":"PRG02/#elements-dun-algorisme","title":"Elements d'un algorisme","text":"<p>Els elements d'un algorisme s\u00f3n un conjunt d'instruccions, de diferents tipus:</p> <ul> <li>Instruccions d'entrada i d'eixida: per a interaccionar amb l'usuari (introduir dades al programa o que aquest mostre resultats).</li> <li>Instruccions d'assignaci\u00f3: per a decidir si s'executen un conjunt d'instruccions o unes altres.</li> <li>Instruccions de repetici\u00f3: per a repetir un conjunt d'instruccions.</li> </ul> <p>Anem a vore en detall en qu\u00e8 consisteix cadascuna d'aquestes instruccions.</p>"},{"location":"PRG02/#instruccions-dentrada-i-deixida","title":"Instruccions d'entrada i d'eixida","text":"<p>Servixen perqu\u00e8 el programa intercanvie informaci\u00f3 amb un medi extern (generalment teclat i pantalla).</p> <ul> <li>Entrada (o lectura): es demana un valor per teclat (o pel ratol\u00ed, o des d'un fitxer o base de dades) per a guardar-lo en una variable (generalment).</li> <li>Eixida (o escriptura): es mostra una dada (una constant o el valor d'una variable o el resultat d'una expressi\u00f3) per pantalla (o per impressora o la deixar\u00e0 en un fitxer o base de dades...).</li> </ul> <p>Per a vore un exemple d'instruccions d'entrada i d'eixida, veiem com podria ser un algorisme que demane per teclat el radi d'una circumfer\u00e8ncia i mostre l'\u00e0rea corresponent.</p> <p></p> <p>Per iniciar-se en la programaci\u00f3, moltes vegades conv\u00e9 fer \u00fas dels ordinogrames (sobretot quan vejam bifurcacions complexes, etc). Per tant, recomanem l'aplicaci\u00f3 del PSeInt per tal de comprovar si l'algorisme funciona.</p> <p>Ara b\u00e9, si volem fer l'algorisme en pseudocodi, quasi que \u00e9s millor fer-ho ja en un llenguatge de programaci\u00f3 que s'utilitze (no t\u00e9 sentit aprendre la sintaxi del PSeInt).</p> <p>Per tant, anirem veient els distints elements en ordinograma i en Python.</p> <p>Veiem com podria ser la implementaci\u00f3 en Python d'este algorisme que hem vist:</p> Python<pre><code>print (\"Dis-me el radi: \")  #(1)!\nradi = int(input()) #(2)!\nprint(\"\u00c0rea: \", 3.14 * radi * radi) #(3)!\n</code></pre> <ol> <li>Mostra la pantalla</li> <li>Llig text, els converteix a enter i el guarda en la variable 'radi'</li> <li>Mostra el text \"Area\" i el resultat del c\u00e0lcul</li> </ol> <p>Una altra forma:</p> Python<pre><code>import math #(1)!\nradi = int(input(\"Dis-me el radi: \")) #(2)! \nprint(\"\u00c0rea: \", math.pi * radi ** 2) #(3)!\n</code></pre> <ol> <li>Importem la llibreria per a usar un valor de pi m\u00e9s aproximat</li> <li>Mostra text, llig valor per teclat, el converteix a enter i el guarda en 'radi'</li> <li>Mostra el resultat. En Python la pot\u00e8ncia es fa amb **</li> </ol> <p>Nota</p> <ul> <li>Per fer un ordinograma i poder-lo provar podem usar PSeInt:<ul> <li>PSEINT</li> </ul> </li> <li>Per a programar en local en Python:<ul> <li>THONNY<ul> <li>Es tracta d'un IDE molt senzill per a programar en Python. Ve integrat amb ell el propi Python i amb una \u00fanica instal\u00b7laci\u00f3 podem comen\u00e7ar a crear els nostres primers programes. Recomanat!</li> </ul> </li> </ul> </li> </ul> <p>Al tema seg\u00fcent ja vorem altres alternatives com VSCode.</p> Exercici 1. Instruccions d'entrada i d'eixida <p>Demana 2 n\u00fameros per teclat i mostra la seua suma, resta, multipliaci\u00f3 i dividisi\u00f3. Fes-ho de dues maneres: ordinograma (PSeInt) i en Python (OnlineGDB).</p>"},{"location":"PRG02/#instruccions-dassignacio","title":"Instruccions d'assignaci\u00f3","text":"<p>Una assignaci\u00f3 consisteix en guardar un valor en una variable.</p> <p></p> <p>En la primera instrucci\u00f3 de l'exemple anterior, est\u00e0 posant el valor 5 dins de la variable nota1. En la segona instrucci\u00f3 posa un 7 en la variable nota2. I en la tercera, suma les dos variables, les divideix entre 2 i el resultat el posa dins de la variable notaMitja.</p> <p>\u00c9s a dir, una assignaci\u00f3 consta de 2 parts separades per un operador d'assignaci\u00f3. Sol emprar-se l'operador \"=\" (en PSeInt \u00e9s una fletxa cap a l'esquerra: \"&lt;-\"):</p> <p></p> <p>Cal tindre en compte que les assignacions NO s\u00f3n equacions matem\u00e0tiques.</p> <p>Exemple</p> <p><code>x = x + 1</code> no t'e sentit com a equaci\u00f3 per\u00f2 s\u00ed com a instrucci\u00f3 en un algorisme. \u00c9s el que anomenem un increment de la variable. En eixa instrucci\u00f3 se li assigna a la variable num\u00e8rica x un valor que correspon al valor que tenia abans eixa variable m\u00e9s una unitat.</p> Exercici 2. Instruccions d'assignaci\u00f3 <p>Fes l'algorisme amb un ordinograma o amb Python per a calcular el sou d'un treballador:</p> <ul> <li>Demana per teclat el nom del treballador, la quantitat d'hores que ha treballat i el preu per hora que paga l'empresa.</li> <li>Cal tenir en compte que la retenci\u00f3 aplicada \u00e9s del 15%.</li> <li>Calcula el sou brut (import que paga l'empresa), l'import retingut (import que s'emporta hisenda) i el sou net (import que s'emporta el treballador).</li> <li>Mostra per pantalla el nom del treballador i les dades calculades abans.</li> </ul>"},{"location":"PRG02/#instruccions-de-bifurcacio","title":"Instruccions de bifurcaci\u00f3","text":"<p>Les instruccions de bifurcaci\u00f3 (o selecci\u00f3) serveixen per a quan volem executar un conjunt d'ordres nom\u00e9s si es compleix alguna condici\u00f3 determinada.</p> <p></p> <p>En l'ordinograma podem no posar res en alguna de les 2 branques. En Python \u00e9s opcional la part del else:</p> <p></p> <p>Tamb\u00e9 podem posar instruccions de bifurcaci\u00f3 dins d'altres. \u00c9s a dir: una estructura if dins d'un altre if, o dins d'un altre else.</p> Exercici 3 RESOLT. Instruccions de bifurcaci\u00f3 <p>Fes un programa en Python que calcule l'\u00e0rea d'un rectangle o que mostre un missatge d'error si algun costat no \u00e9s positiu.</p> Python<pre><code>a = int(input(\"Llarg: \"))\nb = int(input(\"Ample: \"))\n\nif (a &lt;= 0 or b &lt;= 0):\n    print(\"Costats incorrectes\")\nelse:\n    area = a * b\n    print(f\"L'\u00e0rea de {a} i {b} \u00e9s {area}\") # Hem fet \u00fas dels \"f-strings\". Ho veurem m\u00e9s avant.\n</code></pre> Exercici 4 RESOLT <p>Fes un algorisme que llisca 2 n\u00fameros i que mostre quin \u00e9s el major; o b\u00e9, si \u00e9s el cas, que diga que s\u00f3n iguals. Fixa't que hi ha un if-else dins d'un else.</p> Python<pre><code>n1 = int(input(\"Dis-me un n\u00famero: \"))\nn2 = int(input(\"Dis-me'n un altre: \"))\n\nif (n1 &gt; n2):\n    print(f\"El major \u00e9s el {n1}\")\nelse:\n    if (n2 &gt; n1):\n        print(f\"El major \u00e9s el {n2}\")\n    else:\n        print(\"S\u00f3n iguals\")\n</code></pre> Exercici 5 <p>Fes un programa en Python per a llegir un n\u00famero de teclat i dir si \u00e9s parell. No s'ha de dir res en cas contrari.</p> Exercici 6 <p>Demanar un n\u00famero i dir si \u00e9s parell o imparell.</p> Exercici 7 <p>Donats dos n\u00fameros, calcular quin \u00e9s el m\u00e9s gran.</p> Exercici 8 <p>Donats 3 n\u00fameros, calcular quin \u00e9s el m\u00e9s gran.</p> Exercici 9 <p>Donats 3 n\u00fameros, calcular quin \u00e9s el m\u00e9s gran i el m\u00e9s menut.</p> Exercici 10 <p>Donats 3 n\u00fameros, calcular quins s\u00f3n els dos m\u00e9s menuts.</p> Exercici 11 <p>Donats 3 n\u00fameros, comprova si poden correspondre a les mesures dels costats d'un triangle.</p> <p>PISTA: La suma dels dos m\u00e9s menuts ha de ser major que el gran.</p> Exercici 12 <p>Transformar una nota num\u00e8rica a la forma: Molt deficient, Insuficient, Suficient, B\u00e9, Notable, Excel\u00b7lent. Tamb\u00e9 cal mostrar error si la nota \u00e9s negativa o &gt;10.</p> Exercici 13 <p>Llegir dos n\u00fameros de teclat i una lletra, que ser\u00e0 el codi d'operaci\u00f3 (Suma, Resta, Multiplicaci\u00f3 o Divisi\u00f3). Caldr\u00e0 mostrar el resultat de l'operaci\u00f3 demanada. Si no s'ha introdu\u00eft un codi d'operaci\u00f3 correcte, cal mostrar un error.</p>"},{"location":"PRG02/#instruccions-de-bifurcacio-multiple","title":"Instruccions de bifurcaci\u00f3 m\u00faltiple","text":"<p>En la bifurcaci\u00f3 doble, el programa executava un bloc d'instruccions d'entre 2 possibles, depenent del vaor d'una condici\u00f3. Amb una instrucci\u00f3 de bifurcaci\u00f3 m\u00faltiple, el programa executar\u00e0 un bloc d'entre molts possibles, depenent del valor d'una variable (o expressi\u00f3) entrea (o de tipus car\u00e0cter).</p> <p></p> <p>A l'exemple, si el valor numEstacio \u00e9s 1, s'executar\u00e0 la instrucci\u00f3 (o conjunt d'instruccions) corresponent. Si f\u00f3ra 2, les instruccions del 2, etc. I si no f\u00f3ra ni 1, ni 2, ni 3 , ni 4, s'executaria el bloc d'instruccions de l'apartat De Otro Modo.</p> <p>Ara b\u00e9: la bifurcaci\u00f3 m\u00faltiple de Python no t\u00e9 eixa estructura. En compte de triar el bloc d'instruccions a executar segons el valor d'una sola variable (o expressi\u00f3), en Python cada bloc d'instruccions t\u00e9 la seua condici\u00f3 per a poder executar-se.</p> <p>Java s\u00ed que t\u00e9 una estructura semblant a la del PSeInt (anomenada switch) per\u00f2 ja la veurem m\u00e9s endavant. Veiem ara com implementar la bifurcaci\u00f3 m\u00faltiple en Python.</p> <p>En Python s'utilitza l'estructura if-elif-else, que \u00e9s com si tingu\u00e9rem dins d'un else una estructura if-else. I dins d'eixe else, una altra estructura if-else, etc.</p> <p></p> <p>Fixeu-vos que:</p> <ul> <li>Un elif ve a ser la contracci\u00f3 de el(se)+if, amb l'avantatge que no has d'anar sagnant cap a la dreta en cada condici\u00f3 (i no ocupa tantes l\u00ednies).</li> <li>Esta estructura de Pyhton anir\u00e0 per un cam\u00ed o per altre depenent de les diverses condicions que li anem posant. \u00c9s a dir: es podrien posar condicions diferents en cada elif. Mentre que en el seg\u00fan del PSeInt, anir\u00e0 per un cam\u00ed o per altre depenent dels valors d'una sola variable o expressi\u00f3.</li> </ul> Exercici 14. Instruccions de bifurcaci\u00f3 m\u00faltiple <p>Fes un programa en Python usant elif per a llegir de teclat un n\u00famero de l'1 al 7 i mostrar el nom corresponent al dia de la setmana (dilluns, dimarts...):</p>"},{"location":"PRG02/#instruccions-de-repeticio","title":"Instruccions de repetici\u00f3","text":"<p>Amb les estructures de repetici\u00f3 podrem fer que un grup de sent\u00e8ncies s'execute diverses vegades. Quantes?</p> <ul> <li>mentre es complisca una condici\u00f3: repeticions condicionals.</li> <li>una determinada quantitat de vegades: repeticions incondicionals.</li> </ul>"},{"location":"PRG02/#repeticio-condicional-while","title":"Repetici\u00f3 condicional WHILE","text":"<p>Amb l'estructura while posarem en un bloc aquelles instruccions que volem que s'executen repetidament mentre es complisca una determinada condici\u00f3.</p> <p></p> Exercici 15. Instruccions de repeticions condicionals while <p>Fes un programa en Python que, donat el radi, calcule l'\u00e0rea del cercle, per\u00f2 demanant repetidament el radi fins que l'usuari ens done un radi positiu.</p> Exercici 16 <p>Demana any de naixement i de defunci\u00f3 d'una persona. Caldr\u00e0 demanar-ho repetidament fins que siguen dades coherents (l'any de defunci\u00f3 no pot ser anterior al de naixement). Despr\u00e9s, mostra quants anys ha viscut.</p>"},{"location":"PRG02/#repeticio-condicional-fins-no-en-python","title":"Repetici\u00f3 condicional FINS (no en Python)","text":"<p>Amb l'estructura algor\u00edsmica FINS, posarem en un bloc aquelles instruccions que volem que s'executen repetidament fins que es complisca una determinada condici\u00f3.</p> <p>\u00c9s paregut al bucle MENTRE (while) per\u00f2 amb 2 difer\u00e8ncies:</p> <p>Exemple de repetici\u00f3 condicional FINS</p> <p></p> <p>Veiem que hi ha 2 difer\u00e8ncies entre un MENTRE i un FINS. En un bucle FINS:</p> <ul> <li>Sempre s'entra al bucle almenys 1 vegada, ja que la condici\u00f3 est\u00e0 al final del bucle.</li> <li>La condici\u00f3 \u00e9s just la contr\u00e0ria que MENTRE, ja que no hem de posar la condici\u00f3 per a continuar en el bucle, sin\u00f3 la condici\u00f3 per a eixir d'ell. No \u00e9s el mateix dir \"Mentre (no em donen la paga, la demanar\u00e9)\" que \"Repeteix demanar la paga fins que (s\u00ed que em donen la paga)\".</li> </ul> <p>Python no t\u00e9 esta estructura de posar la condici\u00f3 al final del bucle (no al principi), per\u00f2 podem simular eixe comportament (i Java t\u00e9 el do-while, que \u00e9s una cosa intermitja entre un MENTRE i un FINS):</p> <p></p> <p>En Python veiem que tenim un bucle infinit (en principi) ja que hem posat un while true. Per\u00f2 despr\u00e9s, podem eixir del bucle a la for\u00e7a amb el break.</p> <p>En canvi, en Java vorem que tenim l'estructura do-while, que \u00e9s pareguda al FINS del PSeInt perqu\u00e8 la condici\u00f3 est\u00e0 al final per\u00f2 es diferencia en que la condici\u00f3 que posem \u00e9s per a continuar en el bucle, no per a eixir.</p> <p>Com sabem si cal usar la condici\u00f3 al principi o b\u00e9 usar el while true i el break? Per regla general, si \u00e9s una condici\u00f3 senzilla, cal posar la condici\u00f3 al principi. Si usem el while true i no posem els break que toquen, podriem provocar un bucle infinit.</p> <p>Exercici 16 amb while-true i break</p> <p>Demana any de naixement i de defunci\u00f3 d'una persona. Caldr\u00e0 demanar-ho repetidament fins que siguen dades coherents (l'any de defunci\u00f3 no pot ser anterior al de naixement). Despr\u00e9s, mostra quants anys ha viscut.</p> Python<pre><code>anyNaixement = int(input(\"Any de naixement: \"))\n\nwhile True:\n    anyDefuncio = int(input(\"Any de defuncio: \"))\n    if anyDefuncio &gt;= anyNaixement:\n        break\n    else:\n        print(\"L'any de defuncio no pot ser anterior a l'any de naixement\")\n\nprint(\"Ha viscut\", anyDefuncio - anyNaixement, \"anys\")\n</code></pre>"},{"location":"PRG02/#repeticio-incondicional-for","title":"Repetici\u00f3 incondicional FOR","text":"<p>Amb l'estructura PER_A (para en castell\u00e0 i for als llenguatges de programaci\u00f3), podrem repetir un bloc una quantitat de voltes determinada. Per exemple, si volem que un bloc d'instruccions s'execute 5 vegades, ho farem en una estructura (for) amb ajuda d'una variable que anir\u00e0 agafant els valors del 0 al 4 (o de l'1 al 5, etc).</p> <p>Exemple</p> <p>Volem mostrar 5 vegades \"Hola, m\u00f3n!\"</p> <p></p> <p>Exemple</p> <p>Mostrar els n\u00fameros que hi ha entre el 100 i el 200, de 3 en 3.</p> PseudocodiPython PSeInt<pre><code>Algoritmo AltreExemplePer\n    Para i&lt;-100 hasta 200 con paso 3\n        Escribir i\n    FinPara\nFinAlgoritmo\n</code></pre> Python<pre><code>for i in range(100, 201, 3):\n    print(i)\n</code></pre> <p>M\u00e9s endavant entrarem en detall en distints tipus de for que t\u00e9 Python. De moment, veiem alguns exemples dels valors que tindr\u00e0 la i en funci\u00f3 del range:</p> <ul> <li><code>range(10) --&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></li> <li><code>range(4, 10) --&gt; [4, 5, 6, 7, 8, 9]</code></li> <li><code>range(4, 10, 2) --&gt; [4, 6, 8]</code></li> <li><code>range(10, 1, -1) --&gt; [10, 9, 8, 7, 6, 5, 4, 3, 2]</code></li> </ul> Exercici 17. Instruccions de repeticions incondicionals <p>Demanar per teclat quants n\u00fameros es volen mostrar. A continuaci\u00f3, es mostraran els n\u00fameros des d'eixe n\u00famero fins a l'1 (en eixe ordre).</p> Exercici 18 <p>Demanar un valor inicial i un valor final. Caldr\u00e0 mostrar els valors que hi ha entre ells per\u00f2 de 3 en 3. El valor inicial pot ser major que el final.</p> <p>Exemples:</p> <ul> <li><code>vi = 10   vf = 20</code> ---&gt;  Mostrar\u00e0: 10, 13, 16, 19</li> <li><code>vi = 20   vf = 10</code> ---&gt;  Mostrar\u00e0: 20, 17, 14, 11</li> </ul> Exercici 19 <p>Imprimeix la taula de multiplicar del 9.</p>"},{"location":"PRG02/#comptadors-acumuladors-i-interruptors","title":"Comptadors, acumuladors i interruptors","text":"<p>De vegades, les variable s'utilitzen per a unes finalitats concretes. Anem a vore quines s\u00f3n eixes finalitats i com tractar eixes variables.</p>"},{"location":"PRG02/#comptadors","title":"Comptadors","text":"<p>Un comptador \u00e9s una variable destinada a comptar quantes vegades ocorre alguna cosa. Sol emprar-se en els bucles (de qualsevol tipus: while o for). L'\u00fas del comptador t\u00e9 2 instruccions b\u00e0siques i sol ser aix\u00ed:</p> <p></p> <p>Exemple d'\u00fas de comptadors</p> <p></p> Exercici 21. \u00das de comptadors <p>Indica quants divisors (no quins) t\u00e9 un n\u00famero donat.</p> Exercici 22 <p>Pregunta quina \u00e9s l'arrel quadrada de 225 fins que siga encertat. Finalment, mostra quants intents s'han fet.</p> Exercici 23 <p>Imprimix quants n\u00fameros hi ha entre 1 i 100 que s\u00f3n m\u00faltiples de 2, quants m\u00faltiples de 3 i quants m\u00faltiples de 2 i de 3 al mateix temps.</p> Exercici 24 <p>Llig uns quants n\u00fameros (fins que posem 0). Mostra quants positius, quants negatius i quants acaben en 0.</p> Exercici 25 RESOLT <p>Fes un programa que donat un n\u00famero, calcule quants d\u00edgits t\u00e9.</p> Python<pre><code>num = int(input(\"Dona'm un n\u00famero \"))\n\ncDigits = 0 #(1)!\n\nwhile (num &gt; 0):\n    num = num // 10 #(3)!\n    cDigits = cDigits + 1 #(2)!\n\nprint(cDigits, \"d\u00edgits\")\n</code></pre> <ol> <li>inicialitzaci\u00f3 del comptador</li> <li>Increment</li> <li>S'ha emprat l'operador // que torna sols la part sencera de la divisi\u00f3</li> </ol>"},{"location":"PRG02/#acumuladors","title":"Acumuladors","text":"<p>Un acumulador \u00e9s una variable destinada a acumular diferents quantitats.</p> <p>Un acumulador \u00e9s com un comptador per\u00f2 en compte de sumar 1, sumarem diferents quantitats (no volem comptar sin\u00f3 acumular quantitats).</p> <p></p> <p>Exemple d'acumulador</p> <p>Volem acumular l'import d'una factura:</p> Python<pre><code>q = int(input(\"Quantitat: \"))\n\ntotal = 0 #(1)!\n\nwhile (q!=0):\n    p = int(input(\"Preu: \"))\n    total = total + (q*p) #(2)!\n    q = int(input(\"Quantitat: \"))\n\nprint(\"Total:\", total)\n</code></pre> <ol> <li>inicialitzaci\u00f3 de l'acumulador</li> <li>Increment</li> </ol> Exercici 26. \u00das d'acumuladors <p>Demana quantitats fins que s'introdu\u00efsca la quantitat 0. Cadr\u00e0 mostrar la suma de totes les quantitats.</p> Exercici 27 <p>Demana les notes dels 23 alumnes de la classe. Mostra la nota mitjana.</p> Exercici 28 <p>Mostra els n\u00fameros naturals que hi ha entre dos n\u00fameros introdu\u00efts per teclat i calcula la suma dels parells i la dels imparells. Per \u00faltim, mostra els dos totals.</p> Exercici 29 <p>Introdueix 2 valors A i B (A &lt; B). Incrementa A de 2 en 2 i decrementa B de 3 en 3 fins que A &gt; B.</p> Exercici 30 <p>Demana 2 n\u00fameros per teclat i mostra la multiplicaci\u00f3 dels dos... per\u00f2 sense usar l'perador de la multiplicaci\u00f3 (*). \u00c9s a dir: haur\u00e0s de sumar un dels dos n\u00fameros tantes vegades com diu l'altre n\u00famero.</p>"},{"location":"PRG02/#acumuladors-de-productes","title":"Acumuladors de productes","text":"<p>Generalment, la quantitat va sumant-se a l'acumulador, per\u00f2 tamb\u00e9 podria multiplicar-se. Cal tindre en compte aix\u00f2 per a iniciar l'acumulador:</p> <ul> <li>Si volem sumar quantitats, el <code>valor_inicial</code> sol ser 0.</li> <li>Si volem multiplicar quanitats, el <code>valor_inicial</code> sol ser 1.</li> </ul> Exercici 31 RESOLT <p>Donats 2 n\u00fameros (base i exp) calcula la pot\u00e8ncia (base<sup>exp</sup>). Se suposa que la pot\u00e8ncia no \u00e9s un operador ni cap funci\u00f3 predefinida.</p> Python<pre><code>base = int(input(\"Base: \"))\nexpo = int(input(\"Exponent: \"))\n\npot = 1 #(1)!\n\nfor i in range (expo):\n    pot = pot * base #(2)!\n\nprint (\"Pot\u00e8ncia:\", pot)\n</code></pre> <ol> <li>Si inicialitz\u00e0rem a 0, el producte sempre donaria 0.</li> <li>Acumulem el producte</li> </ol> Exercici 32. Acumuladors de productes <p>Mostra el producte de tots els n\u00fameros imparells entre l'1 i el 40.</p> Exercici 33 <p>Mostra la suma, el producte i la mitjana dels 100 primers n\u00fameros naturals.</p> Exercici 34 <p>Calcula el factorial d'un n\u00famero introdu\u00eft per teclat.</p>"},{"location":"PRG02/#interruptors","title":"Interruptors","text":"<p>Els interruptors (tamb\u00e9 coneguts com indicadors, banderes o flags) s\u00f3n variables destinades a indicar si en alguna de les iteracions d'un bucle ha passat o no una cosa determinada.</p> <p>Estes variables seran de tipus l\u00f2gic (boole\u00e0) ja que nom\u00e9s guardaran 2 possibles valors: ha passat alguna cosa (vertader) o no (fals). En Python, estos valors s\u00f3n True i False (en PSeInt s\u00f3n Verdadero i Falso). Ja vorem que en Java s\u00f3n true i false (en min\u00fascula).</p> <p></p> <p>Per\u00f2 si un llenguatge no admetera el tipus boole\u00e0 (com el llenguatge C), podr\u00edem usar una variable de tipus enter (per exemple usant els valors 0 i 1) o de tipus car\u00e0cter (per exemple emprant els valors \"V\" i \"F\", o b\u00e9, \"S\" i \"N\", etc).</p> Exercici 35. \u00das d'interruptors <p>Demana un n\u00famero per teclat i digues si \u00e9s un n\u00famero primer o no. Un n\u00famero \u00e9s primer si nom\u00e9s t\u00e9 2 divisors (per ell mateix i per 1, clar).</p>"},{"location":"PRG02/#alguns-algorismes-basics","title":"Alguns algorismes b\u00e0sics","text":""},{"location":"PRG02/#obtindre-el-major-duna-llista-de-numeros","title":"Obtindre el major d'una llista de n\u00fameros","text":"<p>Imaginem que (sense cap ordinador), vull anar preguntant l'edat de tot l'alumnat per a poder saber l'edat m\u00e0xima. Com ho faria? No he de recordar l'edat de tots, sin\u00f3 que nom\u00e9s necessite saber en cada moment l'edat de l'alumne actual i l'edat m\u00e0xima obtinguda fins eixe moment (que haur\u00e9 d'anar canviant o no).</p> <p>Per tant, necessite 2 variables: edat (per a guardar l'edat de l'alumne \"actual\") i maxima (per a guardar l'edat m\u00e0xima fins a eixe moment). L'algorisme seria:</p> <p>Algorisme</p> <ul> <li>Inicialitzar maxima a un valor molt xicotet. En el cas de les edats ens serviria el 0, ja que cap alumne pot tindre menys de 0 anys.</li> <li>Per cada alumne del bucle faria:<ul> <li>Demanar l'edat de l'alumne (la guarde sempre a la variable edat).</li> <li>Si eixa edat \u00e9s major que la que tinc en maxima, canvie el valor de maxima a eixa edat.</li> </ul> </li> </ul> Python<pre><code>maxima = 0\n\nfor i in range (24):\n    edat = int(input(\"Edat: \"))\n    if (edat &gt; maxima):\n        maxima = edat\n\nprint (\"Edat m\u00e0xima:\", maxima)\n</code></pre> <p>Ara b\u00e9: i si no foren edats? \u00c9s a dir: imaginem que volem calcular el n\u00famero m\u00e0xim d'una llista de n\u00fameros per\u00f2 que tamb\u00e9 podrien ser negatius. Fins i tot, tots els n\u00fameros podrien ser negatius. En eixe cas no ens serviria inicialitzar el valor de la variable maxima a 0, sin\u00f3 que haur\u00edem d'assignar-li un valor que siga m\u00e9s xicotet que tots els que puguen estar en la llista.</p> <p>En eixe cas tenim 2 opcions per a trobar el valor inicial de la variable maxima:</p> <ol> <li>El valor m\u00e9s xicotet que admet eixe tipus de dades en eixe llenguatge. Per exemple, el menor enter en Java seria Integer.MIN_VALUE. Compte! Python no t\u00e9 l\u00edmit en la grand\u00e0ria dels enters.</li> <li>El primer valor de la llista de n\u00fameros.</li> </ol> <p>Per tant, si volem obtindre el m\u00e0xima de 100 valors usant l'opci\u00f3 (2), al principi de l'algorisme direm que el m\u00e0xim \u00e9s el primer d'eixos valors. Despr\u00e9s llegirem en un bucle els altres 99 n\u00fameros i, com abans, anirem canviant, si cal, el valor m\u00e0xim:</p> Python<pre><code>max = int(input(\"N\u00fam: \"))\n\nfor i in range (99):\n    num = int(input(\"N\u00fam: \"))\n    if (num &gt; max):\n        max = num\n\nprint(\"M\u00e0xim:\", max)\n</code></pre> Exercici 36. C\u00e0lcul del major <p>Llig uns quants n\u00fameros (fins que posem 0). Mostra el major i el menor.</p>"},{"location":"PRG02/#bucles-niuats","title":"Bucles niuats","text":"<p>Podem posar un bucle (o m\u00e9s) dins d'un altre.</p> <p>Per exemple, si volem obtindre de teclat un n\u00famero imparell, cal un bucle per a demanar cont\u00ednuament el n\u00famero fins que siga imparell. Per\u00f2 si volem demanar 4 n\u00fameros imparells, haurem de posar el bucle anterior dins d'un altre bucle:</p> <p>Bucles niuats</p> Python<pre><code>for in range (1, 5):\n    num = int(input(\"N\u00fam. imparell:\"))\n\n    while num % 2 == 0:\n        print(\"No \u00e9s imparell. Torna\")\n        num = int(input(\"num imparell: \"))\n\n    print(f\"El {num} \u00e9s imparell\")\n    print(f\"Ja tenim {i} imparells\")\n</code></pre> <p>NOTA: recorda que l'operador <code>%</code> calcula el residu de la divisi\u00f3 entera, tant en PSeInt, Python i Java (encara que PSeInt tab\u00e9 admet l'operador mod).</p> Exercici 36.quadrat <p>Dibuixa un quadrat de car\u00e0cters <code>x</code>, de grand\u00e0ria <code>n</code> (demanada per teclat). Per exemple, si <code>n</code> \u00e9s 4, cal dibuixar:</p> <p>Text Only<pre><code>x   x   x   x\nx   x   x   x\nx   x   x   x\nx   x   x   x\n</code></pre> NOTA: per a escriure sense que fa\u00e7a despr\u00e9s un salt de l\u00ednia:</p> Python<pre><code>print(\"Hola\", end=\"\")\n</code></pre> Exercici 36.triangle <p>Dibuixa un triangle de car\u00e0cters <code>x</code> d'altura <code>n</code> (demanada per teclat). Per exemple, si <code>n</code> \u00e9s 4:</p> Text Only<pre><code>x\nx   x\nx   x   x\nx   x   x   x\n</code></pre> Exercici 36.triangle2 <p>Dibuixa un triangle de <code>x</code> d'altura <code>n</code> (demanada per teclat). Per exemple, si <code>n</code> \u00e9s 4:</p> Text Only<pre><code>x   x   x   x\nx   x   x\nx   x\nx\n</code></pre> Exercici 36.rectangle <p>Dibuixa un triangle de <code>x</code> de grand\u00e0ria <code>alt</code> per <code>ample</code> (dades demanades per teclat). Per exemple, si \u00e9s 4 d'alt per 7 d'ample, dibuixarem:</p> Text Only<pre><code>x   x   x   x   x   x   x\nx   x   x   x   x   x   x\nx   x   x   x   x   x   x\nx   x   x   x   x   x   x\n</code></pre> Exercici 36.rectangleBuit <p>Igual que el 36.4, per\u00f2 ara el triangle ha d'estar buit:</p> Text Only<pre><code>x   x   x   x   x   x   x\nx                       x\nx                       x\nx   x   x   x   x   x   x\n</code></pre> Exercici 37 <p>Mostra les taules de multiplicar del 2 al 9.</p> <p>PISTA: ja havies fet, amb un bucle, una taula de multiplicar. Ara es tracta de posar eixe tr\u00f3s de codi dins d'un altre bucle, ja que volem motes taules.</p> Exercici 37.1 <p>Demana un n\u00famero per teclat (n) i mostra per pantalla les seg\u00fcents l\u00ednies:</p> Text Only<pre><code>1 = 1\n1 + 2 = 3\n1 + 2 + 3 = 6\n...\nfins a les n l\u00ednies\n</code></pre> Exercici 37.2 <p>Mostra els primers 15 n\u00fameros primers. Els resultat ha de ser:</p> Text Only<pre><code>Nombres primers:\n2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47\n</code></pre> <p>NOTA: L'1 no \u00e9s primer, per definici\u00f3.</p>"},{"location":"PRG02/#exercicis","title":"Exercicis","text":"Exercici 38 <p>En un p\u00e0rquing es paga 2\u20ac l'hora completa. I per als minuts restants, es paga 4 c\u00e8ntims per minut, per\u00f2 no pot excedir el preu d'una hora. Calcula qu\u00e8 li toca pagar a un conductor per un determinat temps, donat en minuts.</p> <p>NOTA: es poden eliminar els decimals amb la funci\u00f3 <code>trunc</code>.</p> Exercici 39 <p>Donat un temps en segons, calcula els segons que falten per a convertir-se en minuts sencers. Per exemple, per a un temps de 70 segons, en faltarien 50.</p> Exercici 40 <p>Donat un temps en minuts, calcula els dies, hores i minuts que li corresponen.</p> Exercici 41 <p>Pregunta quina \u00e9s l'arrel quadrada de 225 fins que siga encertat.</p> Exercici 42 <p>C\u00e0lcul del sou d'un treballador. Pregunta quantes hores ha treballat (a partir de les 40 hores es consideraran extres). Pregunta quin \u00e9s el preu de l'hora normal (el preu de l'hora extra \u00e9s un 50% m\u00e9s del preu de l'hora normal). Que cobra el treballador?</p> Exercici 43 <p>Modifica l'exercici de les hores extres per a obtindre la suma dels salaris de tots els treballadors. Tots la mateixa tarifa. Acabar\u00e0 quan posem 0 hores treballades.</p> Exercici 44 <p>Demana <code>N</code> notes d'un estudiant i calcula:</p> <ul> <li>Quantes notes t\u00e9 suspeses.</li> <li>Quantes aprovades.</li> <li>La mitjana de les notes.</li> <li>La mitjana de les notes aprovades i la mitjana de les suspeses.</li> </ul> Exercici 45 <p>Escriu un algorisme que calcule el total d'una factura d'un article determinat del qual s'adquirixen <code>N</code> unitats a un preu <code>P</code>. L'IVA \u00e9s el 21%. Si l'import a pagar (amb IVA) \u00e9s superior a 300\u20ac, s'aplicar\u00e0 un descompte del 5%.</p> Exercici 46 <p>Modifica l'exercici de la factura per a demanar moltes voltes el preu i la quantitat de diferents articles. Si les unitats introdu\u00efdes s\u00f3n 0, vol dir que no es demanaran m\u00e9s articles. El possible descompte, s'aplicar\u00e0 al final de la factura.</p> Exercici 47 <p>Algorisme que vaja demanant lletres des de teclat i que pare quan es trobe amb una vocal. Cal escriure esta vocal.</p> Exercici 48 <p>Mostra els n\u00fameros entre 100 i 200 que s\u00f3n m\u00faltiples de 3 per\u00f2 que no son m\u00faltiples de 2.</p> Exercici 49 <p>Mostra tots els divisors d'un n\u00famero donat, Utilitzant l'operador <code>mod</code>.</p> Exercici 50 <p>Demana per teclat la quantitat del n\u00fameros que vol introduir l'usuari. A continuaci\u00f3, llig de teclat eixa quantitat de n\u00fameros i digues de cadascun si \u00e9s parell i positiu al mateix temps.</p> Exercici 51 <p>Imprimix la taula de multiplicar d'un n\u00famero introdu\u00eft per teclat.</p> Exercici 52 <p>Dir si un n\u00famero de 3 xifres \u00e9s o no d'Armstrong (si \u00e9s igual a la suma dels seus d\u00edgits al cub, per exemple: 153 = 1\u00b3 + 5\u00b3 + 3\u00b3). Si no ho \u00e9s, torna-ho a intentar per a m\u00e9s n\u00fameros.</p> Exercici 53 <p>Algorisme que mostre tots els n\u00fameros d'Armstrong de l'1 al 1000.</p> Exercici 54 <p>Comprova si un n\u00famero donat \u00e9s perfecte.</p> <p>NOTA: es diu que un n\u00famero \u00e9s perfecte si \u00e9s igual a la suma dels seus divisors excepte ell mateix.</p> Exercici 55 <p>Mostra els n\u00fameros primers menors de 100.</p>"},{"location":"PRG02/#activitat-obligatoria","title":"Activitat obligat\u00f2ria","text":"Partit de b\u00e0squet <p>A l'institut es realitzar\u00e0 un partit de b\u00e0squet, i volem anar anotant en temps real els punts de cada cistella que es fa.</p> <p>Aix\u00ed podrem saber com van en cada moment i podrem traure una xicoteta estad\u00edstica despr\u00e9s de cada quart i en acabar el partit.</p> <p>Activitat</p> <p>Fes un programa que fa\u00e7a el que es detalla a continuaci\u00f3, tenint en compte que has d'usar, on calga, sent\u00e8ncies de bifurcaci\u00f3 doble o m\u00faltiple, bucles de tipus condicional i incondicional, i comptadors i acumuladors.</p> <p>L'algorisme \u00e9s el seg\u00fcent</p> <ul> <li> <p>Demana per teclat els noms dels 2 equips</p> </li> <li> <p>Per cadascun dels 4 quarts del partit caldr\u00e0 fer:</p> <ul> <li> <p>Mostrar informaci\u00f3 del quart que comen\u00e7a. Per exemple: <code>-- COMEN\u00c7A EL QUART N\u00daMERO 1 --</code></p> </li> <li> <p>Bucle que registre cadascuna de les cistelles anotades en eixe quart. S'aniran demanant punts de les cistelles efectuades fins que s'introdu\u00efsca la puntuaci\u00f3 de 0 (que servir\u00e0 per acabar el quart). \u00c9s a dir: per cada cistella efectuada caldr\u00e0 fer el seg\u00fcent:</p> <ul> <li> <p>Preguntar de quants punts ha sigut la cistella (o b\u00e9, un 0 per a acabar el quart). Caldr\u00e0 controlar que el valor introdu\u00eft estiga entre 0 i 3.</p> </li> <li> <p>Preguntar quin equip ha fet la cistella (A o B). Caldr\u00e0 controlar que el valor introdu\u00eft siga una A o una B.</p> </li> <li> <p>Mostrar com va la puntuaci\u00f3 del partit.</p> </li> </ul> <p></p> </li> <li> <p>En acabar cada quart es mostrar\u00e0 l'estad\u00edstica d'eixe quart.</p> </li> </ul> <p></p> <ul> <li>En acabar el partit es mostrar\u00e0 el resum del partit.</li> </ul> <p></p> </li> </ul> <p>NOTES:</p> <ul> <li>Per si no ha quedat clar qu\u00e8 ha de fer el programa, ac\u00ed teniui al nostre company Abd\u00f3, explicant-vos l'execuci\u00f3 d'aquest.</li> <li>El treball \u00e9s individual. Podeu consultar-me a mi tot el que vullgau, per\u00f2 no als companys ni a ChatGPT ni similar. Si detectem que alg\u00fa s'ha copiat alguna part, tindran un 0 els dos (copiat i copiador). El treball est\u00e0 pensat m\u00e9s que res perqu\u00e8 aneu ben preparats a l'examen. De fet, a l'examen podria preguntar-vos alguna modificaci\u00f3 del vostre programa, etc.</li> <li>Cal fer l'algorisme en Python. El nom del fitxer es dir\u00e0:<ul> <li>basquetGarciaPep.py (si et digueren Pep Garcia, clar)</li> </ul> </li> <li>Posa el teu nom complet com a comentari al principi del programa</li> <li>Posa alg\u00fan comentari m\u00e9s pel programa (sense passar-te'n).</li> <li>Puja el fitxer a Aules.</li> </ul>"},{"location":"PRG03/","title":"UD3. Introducci\u00f3 a Python","text":"<p>Al tema anterior, per comen\u00e7ar a vore els principis de la programaci\u00f3 estructurada hem vist algorismes en ordinograma i la seua implementaci\u00f3 en Python. En este tema aprofundirem un poc m\u00e9s en Python pel que fa als operadors i expressions, aix\u00ed com a l'entrada i eixida de dades. A m\u00e9s, com que m\u00e9s endavant es vor\u00e0 el llenguatge Java, conforme anem veient coses en Python, anirem dient ja les difer\u00e8ncies en java. Estes difer\u00e8ncies solen ser iguals en Java i en C.</p>"},{"location":"PRG03/#caracteristiques-basiques-de-python","title":"Caracter\u00edstiques b\u00e0siques de Python","text":"<p>Python \u00e9s un llenguatge creat a finals dels 80 per Guido Van Rossum, i deu el seu nom a l'afici\u00f3 pel grup c\u00f2mic brit\u00e0nic Monty Python.</p> <p>\u00c9s un llenguatge de programaci\u00f3 interpretat, de tipificaci\u00f3 din\u00e0mica i multi plataforma. \u00c9s de prop\u00f2sit general, fins i tot per a la creaci\u00f3 de scripts.</p>"},{"location":"PRG03/#que-necessitem-per-a-programar-en-python","title":"Qu\u00e8 necessitem per a programar en Python?","text":"<p>Ho podem fer de diverses maneres:</p> <ul> <li> <p>Usar un int\u00e8rpret online (no cal instal\u00b7lar res)</p> <p>Per exemple, onlinegdb.com. Caldr\u00e0 seleccionar el llenguatge Python 3, escriure el codi i polsar Run.</p> </li> <li> <p>Instal\u00b7lar l'int\u00e8rpret de Python: www.python.org/downloads</p> <p>Una vegada instal\u00b7lat (Linux ja el porta) podrem:</p> <ul> <li>Provar comandaments en mode interactiu: en el terminal escriurem python3. Entrarem en el mode interactiu: despr\u00e9s de fer intro en cada instrucci\u00f3, s'executar\u00e0.</li> </ul> <p></p> <ul> <li> <p>Escriure el programa en un fitxer de text: Li direm, per exemple, holaMon.py, i l'executarem amb: python3 holaMon.py. No cal compilar res, perqu\u00e8 Python \u00e9s interpretat.</p> </li> <li> <p>Usar un IDE (Entorn de Desenvolupament Integrat): Per exemple, Visual Studio Code. Potser calga instal\u00b7lar l'extensi\u00f3 de Python. Escriurem el nostre programa, el guardarem (holaMon.py) i l'execurarem amb la icona del triangle.</p> </li> </ul> </li> </ul>"},{"location":"PRG03/#estructura-dun-programa-en-python","title":"Estructura d'un programa en Python","text":"<p>Un programa en Python t\u00e9 una estructura molt simple:</p> <ul> <li>No s'ha de posar punt i coma despr\u00e9s de cada instrucci\u00f3.</li> <li>No es posen delimitadors de bloc de programa. Simplement se sangra.</li> <li>No cal indicar el tipus de dades de les variables.</li> </ul> <p>Qualsevol programa escrit en Pyhton t\u00e9 la seg\u00fcent estructura:</p> <p></p> <p>Veiem que l'\u00fanica part (pr\u00e0cticament) necess\u00e0ria en un programa \u00e9s l'entrada, processament i la sortida de dades, com en qualsevol llenguatge de programaci\u00f3.</p> <p>En Python estos apartats poden variar de posici\u00f3.</p> <p>Veiem uns exemples i els analitzem.</p> <p>L'exemple m\u00e9s simple, mostrar un missatge per pantalla:</p> Python<pre><code>print(\"Hola, Pep\")\n</code></pre> <p>Un altre exemple m\u00e9s complet:</p> Python<pre><code># Programa que calcula l'\u00e0rea d'un rectangle (1)\n# Autor: Pep Garcia\n# Data: 2024/10/01\n\nimport time  #(2)!\n\ndef areaRectangle(base, altura): # (3)!\n    return base * altura\n\nb = int(input(\"Dis-me la base del rectangle: \")) #(4)!\na = int(input(\"Dis-me l'al))tura del rectangle: \"))\n\ntime.sleep(2) # Espera 2 segons\n\narea = areaRectangle(b, a) #(5)!\n\nprint(\"L'\u00e0rea del rectangle \u00e9s\", str(area)) #(6)!\n</code></pre> <ol> <li>Descripci\u00f3 del programa</li> <li>Importaci\u00f3 de llibreries</li> <li>Definici\u00f3 de funcions</li> <li>Entrada de dades</li> <li>Processament de dades</li> <li>Sortida de dades</li> </ol> <p>Exemple</p> <p>Copia i apega el codi anterior en l'IDE que tingues de Python i executa'l per vore qu\u00e8 fa.</p> <p>Comentem, per adamunt, algunes coses del programa que m\u00e9s endavant ampliarem:</p> <ul> <li>Descipci\u00f3 del programa. Son comentaris, no s'executen.</li> <li>A l'import indiquem que necessitem una llibreria: conjunt de funcions que ja estan implementades i les podem fer servir als nostres programes. En este exemple la llibreria \u00e9s time i ens cal per a usar la funci\u00f3 time.sleep() que fa que el prgrama pare en eixe punt uns segons (2 en este cas).</li> <li>Despr\u00e8s tenim la definici\u00f3 d'una funci\u00f3, que comen\u00e7a amb la paraula reservada def. Tot el que es pose dins del bloc de la definici\u00f3 d'una funci\u00f3 ha d'anar sagnat (en este cas \u00e9s nom\u00e9s la instrucci\u00f3 return).</li> <li>Despr\u00e9s ja tenim el nostre programa pr\u00f2piament dit, on veiem que:<ul> <li>Les l\u00ednies no tenen cap sagnat (van just a l'esquerra)</li> <li>Amb els input aconseguim que s'introduisquen dades per teclat.</li> <li>Es fa la crida a la funci\u00f3 que hem definit abans (areaRectangle).</li> <li>Finalment mostrem a l'usuari el resultat (print).</li> </ul> </li> </ul>"},{"location":"PRG03/#noms-de-variable-i-funcions-en-python","title":"Noms de variable i funcions en Python","text":"<p>Abans hem vist que hem posat noms de variable i funcions. Estos noms han de tindre unes regles, que solen ser les mateixes en tots els llenguatges, encara que poden variar un poc. En Python estes s\u00f3n les regles per als noms de variables i funcions:</p> <p>Regles per a noms de variables i funcions en Python</p> <ul> <li>Son una combinaci\u00f3 de lletres min\u00fascules [ a...z ], maj\u00fascules [ A...Z ], d\u00edgiint [ 0...9 ] i el car\u00e0cter subratllat [ _ ].</li> <li>Poden tindre qualsevol longitud.</li> <li>S'admeten els accents, la \u00e7 i la \u00f1.</li> <li>No poden haver s\u00edmbols especials ni operadors: <code>[, !, @, #, $, %, *, ...</code></li> <li>No poden comen\u00e7ar amb d\u00edgit.</li> <li>No poden ser paraules reservades:</li> </ul> <p></p>"},{"location":"PRG03/#variables","title":"Variables","text":"<p>Les variables s\u00f3n els llocs on es guarda la informaci\u00f3 (per exemple, els llocs on es guarda cada dada introdu\u00efda per teclat).</p> <p>Es poden classificar en globals i locals:</p> <ul> <li>Variables globals: es creen fora de qualsevol funci\u00f3. Es pot accedir a elles des de qualsevol part del programa.</li> <li>Variables locals: es creen dins d'una funci\u00f3. Es pot accedir a elles nom\u00e9s des d'eixa funci\u00f3.</li> </ul> <p>M\u00e9s endavant vorem els tipus de dades (enter, car\u00e0cter, etc) de les variables.</p>"},{"location":"PRG03/#comentaris","title":"Comentaris","text":"<p>En algunes parts del programa cal que el programador pose anotacions per a:</p> <ul> <li>Recordar el que ha fet, per a futures modificacions.</li> <li>Indicar a altres programadors com s'ha fet alguna cosa.</li> <li>indicar la data (o autor, etc.) de creaci\u00f3 del programa.</li> </ul> <p>Tipus de comentaris:</p> <ul> <li>D'una l\u00ednia:<ul> <li>Precedit per coixinet: # soc un comentari</li> <li>Entre cometes simples: 'soc un comentari'</li> <li>Entre cometes dobles: \"soc un comentari\"</li> </ul> </li> <li>De diverses l\u00ednies:<ul> <li>entre trios de cometes simples: ' ' '</li> <li>entre trios de cometes dobles: \" \" \"</li> </ul> </li> <li>De documentaci\u00f3 de funcions: si posem un comentari entre cometes en la primera l\u00ednia dins d'una funci\u00f3 (per a explicar qu\u00e8 fa) despr\u00e9s podrem accedir a eixe comentari des d'altres parts del programa. Ara ho veurem.</li> </ul> <p>Veiem en este programa exemples dels diferents tipus de comentaris:</p> Python<pre><code>'''\nPrograma que calcula l'area d'un rectangle\nAutor: Pep Garcia\nData: 1-10-2024\n'''\nimport time\n# -----------------------------------------\ndef areaRectangle(b, a):\n    '''\n    Esta funci\u00f3 calcula l'\u00e0rea d'un rectangle\n    Par\u00e0metres:\n        b -&gt; La base del rectangle\n        a -&gt; L'altura del rectangle\n    '''\n    return b*a\n# -----------------------------------------\n\n# Entrada de dades per teclat:\nbase = int(input(\"Dis-me la base del rectangle: \"))\naltura = int(input(\"Dis-me l'altura del rectangle: \"))\n\n# C\u00e0lculs\ntime.sleep(2) # Espera dos segons\narea = areaRectangle(base, altura)\n\n# Eixida de resultats per pantalla:\nprint(\"L'\u00e0rea del rectangle \u00e9s\", str(area))\n</code></pre> <p>Ens alguns IDE com el Visual Studio Code, si poses el cursor damunt del nom d'una funci\u00f3 et mostra els comentaris que has posat en ella:</p> <p></p>"},{"location":"PRG03/#delimitacions","title":"Delimitacions","text":"<p>Son s\u00edmbols especials que permeten al compilador recon\u00e9ixer les diferents parts del programa.</p> <p>El m\u00e9s important \u00e9s el finalitzador de sent\u00e8ncies, que, en molts llenguatges de programaci\u00f3 (com C i Java) \u00e9s el pun i coma ( ; ) per\u00f2 Python fa servir simplement el bot de l\u00ednia.</p> <p>Ac\u00ed tenim els delimitadors que s'usen en Python.</p> <p> Python C i Java Nom Utilitat Salt de l\u00ednia ; Finalitzador - Finalitzar una instrucci\u00f3 simple o una declaraci\u00f3 de variables Tabulaci\u00f3 { } Bloc - Delimitar inici i fi d'un bloc de codi , , Separador - Separar els elements d'una llista ( ) ( ) Par\u00e8ntesi - Agrupar operacions - Par\u00e0metres de funcioins [ ] [ ] Claud\u00e0tors - Per a vectors, llistes... <p></p>"},{"location":"PRG03/#tipus-de-dades","title":"Tipus de dades","text":"<p>Les dades que manegen els programes s\u00f3n de distints tipus: lletres, n\u00fameros sense decimals, amb decimals...</p> <p>Per tant, les variables seran d'un tipus determinat. En la majoria de llenguatges de programaci\u00f3, abans d'utilitzar una nova variable, cal definir-la (declarar-la): indicar de quin tipus \u00e9s. Per\u00f2 en Python no cal. Simplement el tipus de la variable ser\u00e0 del mateix tipus que el valor que li s'assigne.</p> Python<pre><code>edat = 30\nnom = \"Pep\"\npes = 74.5\ncasat = True\n</code></pre> <p>Veiem els distints tipus que solen tindre els llenguatges de programaci\u00f3.</p>"},{"location":"PRG03/#tipus-elementals","title":"Tipus elementals","text":"<p>En Python hi ha 4 tipus b\u00e0sics: enter, amb decimals, cadena i l\u00f2gic.</p> <p>Altres llenguatges, com C i Java, en tenen m\u00e9s, per a indicar enters xicotets o grans, amb signa o sense... Igual que per a n\u00fameros amb decimals.</p>"},{"location":"PRG03/#numeros-enters-int","title":"N\u00fameros enters: int","text":"<p>N\u00fameros enters (sense decimals).</p> <p>Quan posem un n\u00famero s'interpreta que est\u00e0 en sistema de numeraci\u00f3 decimal. Per\u00f2 podem dir-li que ho interprete com a binari, octal o hexadecimal:</p> Python<pre><code>print(11)   # N\u00famero 11 en sistema decimal. Mostra 11\nprint(0b11) # Numero 11 en sistema binari. Mostra 3\nprint(0o11) # N\u00famero 11 en sistema octal. ostra 9\nprint(0x11) # N\u00famero 11 en sistema hexadecimal. Mostra 17\n</code></pre> <p>El print mostra el n\u00famero en sistema decimal.</p>"},{"location":"PRG03/#numeros-amb-decimals-float","title":"N\u00fameros amb decimals: float","text":"<p>N\u00fameros amb decimals</p> Python<pre><code>print(5.2)  # mostra 5.2\nprint(5.)   # mostra 5.0\nprint(.2)   # mostra 0.2\nprint(5e2)  # mostra 500\nprint(5e-2) # mostra 0.05\n</code></pre>"},{"location":"PRG03/#legics-bool","title":"L\u00e8gics: bool","text":"<p>Serveix per si una variable volem que tinga 2 \u00fanics estats (vertader o fols). Els \u00fanics valors que pot tindre una variable d'este tipus s\u00f3n True o False.</p> Python<pre><code>majorEdat = True\njubilat = False\n</code></pre> <p>Ens servir\u00e0 per a quan usem sent\u00e8ncies condicionals (ja entrarem en detall):</p> Python<pre><code>if jubilat:\n    print(\"Est\u00e0 jubilat\")\nelse:\n    print(\"No est\u00e0 jubilat\")\n</code></pre> <p>NOTA</p> <p>En C++ i Java \u00e9s true i false (en min\u00fascula). C no t\u00e9 eixe tipus de dades com a tal (usa el 0 per a false i l'1 per a true).</p>"},{"location":"PRG03/#cadenes-str","title":"Cadenes: str","text":"<p>\u00c9s el tipus de dades per a guardar una cadena de car\u00e0cters (un nom de persona, per exemple). Una dada de tipus str \u00e9s una successi\u00f3 de 0 o m\u00e9s car\u00e0cters dins de cometes simples o dobles (encara que es recomana entre cometes dobles, ja que molts llenguatges nom\u00e9s admeten les dobles).</p> Python<pre><code>nom = \"Pep Garcia\"\ndomicili = 'Carrer La Punt, 54'\nprint(\"Nom de l'alumne:\", nom)\n</code></pre> <p>Per a guardar cadenes els llenguatges utilitzen formes distintes:</p> <ul> <li>En C no \u00e9s un tipus sin\u00f3 un vector de car\u00e0cters (ja vorem els vectors).</li> <li>En Java no \u00e9s un tipus, sin\u00f3 una classe (ja vorem les classes).</li> <li>En Python s\u00ed que \u00e9s un tipus de dades.</li> </ul>"},{"location":"PRG03/#sequencies-descapament","title":"Seq\u00fc\u00e8ncies d'escapament","text":"<p>Per a poder posar unes cometes dobles dis d'una cadena amb cometes dobles es pot usar el car\u00e0cter d'escapament <code>\\</code>. Tamb\u00e9 per a cometes simples:</p> Python<pre><code>print(\"Podem mostrar 'i \\\" dins de cometes dobles\")\nprint('Podem mostrar \\' i \" dins de cometes simples')\n</code></pre> <p>En una cadena de text tamb\u00e9 podem utilitzar este car\u00e0cter d'escapament per a representar diverses accions:</p> <p> Python, C i Java Acci\u00f3 Exemple Resultat \\n Nova l\u00ednia print(\"Hola\\nAd\u00e9u\") \\t Tabulador print(\"Hola\\tAd\u00e9u\") Hola    Ad\u00e8u \\r Retorn de carro print(\"Hola\\rTu\") Tula \\b Backspace print(\"Hola\\bAd\u00e9u\") HolAd\u00e9u <p></p> <p>Encara que les m\u00e9s emprades s\u00f3n <code>\\n</code> i <code>\\t</code>.</p> <p>Totes estes seq\u00fc\u00e8ncies d'escapament tamb\u00e9 es poden usar en C i Java.</p>"},{"location":"PRG03/#tipus-composts","title":"Tipus composts","text":"<p>Els tipus simples (que acabem de veure) serveixen quan hem de guardar una informaci\u00f3 simple. \u00c9s a dir, formada per una sola dada (una temperaura, un nom, una edat...)</p> <p>Per\u00f2 si volem guardar en una variable el domicili d'un client (format per un carrer, n\u00famero, codi postal...) o una data (dia, mes any), el programador haur\u00e0 de definir un tipus de dades compost. Estos tipus de dades compostos els vorem m\u00e9s endavant.</p>"},{"location":"PRG03/#declaracio-de-variables","title":"Declaraci\u00f3 de variables","text":"<p>Una variable \u00e9s una porci\u00f3 de mem\u00f2ria (RAM), representada per un nom (identificador) on es guardar\u00e0 un valor que pot variar al llarg de l'execuci\u00f3 d'un programa.</p> <p>Declarar una variable vol dir indicar de quin tipus ser\u00e0 eixa variable. Depenent del llenguatge de programaci\u00f3 caldr\u00e0 declarar les variables o no. Per tant, atenent a este criteri, tenim 2 tipus de llenguatges de programaci\u00f3:</p>"},{"location":"PRG03/#llenguatges-de-tipificacio-estatica-c-java-pero-no-python","title":"Llenguatges de tipificaci\u00f3 est\u00e0tica (C, Java... per\u00f2 no Python)","text":"<p>Estos llenguatges obliguen a indicar de quin tipus ser\u00e0 una variable abans d'usar-la. Despr\u00e9s, al moment de fer servir les variables, el llenguatge controla que el valor que s'assigne a una variable corresponga al tipus de la variable. Si no \u00e9s el cas, donar\u00e0 error-</p> Java<pre><code>int n;\nfloat x;\nn = 3;\nn = \"Pep\";  // Error perqu\u00e8 no \u00e9s del mateix tipus.\nn = 4.7;    // No d\u00f3na error per\u00f2 lleva la part decimal. Guardar\u00e0 un 4.\nz = 6;      // Error perqu\u00e8 la variable z no est\u00e0 declarada pr\u00e8viament.\n</code></pre>"},{"location":"PRG03/#llenguatges-de-tipificacio-dinamica-python-php","title":"Llenguatges de tipificaci\u00f3 din\u00e0mica (Python, PHP...)","text":"<p>En estos llenguatges no es declara la variable pr\u00e8viament. Simplement quan se li assigna un valor, la variable agafa el tipus d'eixe valor. I pot variar de tipus cada vegada que se li assigna un nou valor.</p> Python<pre><code>n = 7       # Primera vegada que ix la variable n. n val 7 i \u00e9s int\nn = 5.67    # Ara n val 5.67. Per tant, ara \u00e9s float\nn = 9       # Ara n val 9. Per tant, torna a ser int\nn = n+2     # Ara n val 11. Continua sent int\nn = n/4     # Ara n val 2.75. Per tant, ara n \u00e9s float\nn = \"Pep\"   # Ara n \u00e9s str (cadena)\nn = n+2     # ERROR. No li podem sumar 2 al text \"Pep\"\n</code></pre> <p>Com veiem a l'exemple, no tindrem les situacions d'error dels llenguatges de tipificaci\u00f3 est\u00e0tica (ja que no s'ha de declarar la variable i poden canviar de tipus). Per\u00f2 pot ser un desavantatge ja que podria ser que volgu\u00e9rem que en fer la divisi\u00f3 de <code>11/4</code> volgu\u00e9rem guardar la part entera (2) i no 2.75. Ens pot portar a situacions inesperades o inconsistents. Caldr\u00e0 anar en compte en estos casos.</p> <p>NOTA</p> <p>Si en algun moment parlem de \"declarar\" una variable en Python, ens estarem referint al primer moment del programa on li s'assigna un valor a eixa variable.</p>"},{"location":"PRG03/#ambit-i-visibilitat","title":"\u00c0mbit i visibilitat","text":"<p>NOTA</p> <p>Aquestos conceptes s'explicaran en detall quan veiem la programaci\u00f3 modular (funcions). No obstant, veiem un avan\u00e7.</p> <p>Les variables poden \"declarar-se\" (comen\u00e7ar a usar-se) en qualsevol part del programa, per\u00f2 segons el lloc on siguen declarades, les podrem fer servir nom\u00e9s en alguna part (variables locals) o b\u00e9 en tot el programa (variables globals).</p> <p>Exemple 1</p> <p>La variable <code>a</code> \u00e9s local a la funci\u00f3 \"funcioneta\"</p> Python<pre><code># ---------------------\ndef funcioneta():\n    a = 3 # declarem la variable 'a' com a LOCAL (dins de la \"funcioneta\")\n    print(a)\n# ---------------------\n\nprint(\"El programa comen\u00e7a a executar-se per ac\u00ed\")\nfuncioneta()\nprint(a) # ERROR perqu\u00e8 accedim a la variable local de \"funcioneta\"\n</code></pre> <p>Si una variable est\u00e0 declarada dins d'una funci\u00f3, nom\u00e9s podem accedir a ella dins d'eixa funci\u00f3.</p> <p>Exemple 2</p> Python<pre><code># ------------------------\ndef funcioneta():\n    print(a)\n# ------------------------\n\nprint(\"El programa comen\u00e7a a executar-se per ac\u00ed\")\na = 3   # Declarem la variable 'a' com a GLOBAL (fora de les funcions)\nfuncioneta()\nprint(a)\n</code></pre> <p>Si una variable \"delarada\" (primer \u00fas) fora de les funcions, podrem accedir a ella des de qualsevol lloc del programa (b\u00e9, sempre despr\u00e9s de ser declarada). Per\u00f2 ja vorem que no conv\u00e9 declarar variables globals.</p> <p>L'\u00e0mbit i visibilitat d'una variable s\u00f3n conceptes \u00edntimament relacionats. Fan refer\u00e8ncia a des d'on es pot accedir a una variable:</p> <ul> <li>La visibilitat \u00e9s la propietat que indica si es pot accedir o no a una variable en un punt determinat del programa.<ul> <li>En l'exemple 1:<ul> <li>Dins de la funci\u00f3 \"funcioneta\" s\u00ed que hi ha visibilitat de 'a'.</li> <li>Fora de la funci\u00f3 \"funcioneta\" no hi ha visibilitat de 'a'.</li> </ul> </li> <li>En l'exemple 2:<ul> <li>En tot el programa s\u00ed que hi ha visibilitat de 'a'.</li> </ul> </li> </ul> </li> <li>L'\u00e0mbit \u00e9s la zona del programa on \u00e9s visible una variable.<ul> <li>En l'exemple 1, l'\u00e0mbit de 'a' \u00e9s dins de la funci\u00f3 \"funcioneta\"</li> <li>En l'exemple 2, l'\u00e0mbit de 'a' \u00e9s a tot el programa.</li> </ul> </li> </ul> <p>En C i Java, a m\u00e9s de definir variables locals a una funci\u00f3 es poden definir locals a un bloc de codi, tancat entre claus <code>{ }</code>. En eixe cas, eixes variables nom\u00e9s poden ser accedides dins d'eixe bloc de codi.</p> <p>En Python un bloc seria el tr\u00f3s de codi (seguit) amb el mateix sagnat (o subsagnat). Per\u00f2 si una variable es declara en eixe bloc, en Python s\u00ed que podem accedir des d'altres blocs, encara que no \u00e9s recomanable:</p> Python<pre><code>if (edat &gt;= 18):\n    major = True #(1)!\nelse:\n    major = False\n\nprint(major) #(2)!\n</code></pre> <ol> <li>El primer \u00fas de \"major\" es fa en este bloc</li> <li>Per\u00f2 Python em permet usar-la fora del bloc</li> </ol> <p>En canvi, \u00e9s recomanable declarar la variable en el \"bloc de fora\":</p> Python<pre><code>major = False #(1)!\n\nif (edat &gt;= 18):\n    major = True\n\nprint(major) #(2)!\n</code></pre> <ol> <li>Declarem la variable en el \"bloc de fora\"</li> <li>... ja que vaig a usar-la en eixe bloc</li> </ol>"},{"location":"PRG03/#operadors","title":"Operadors","text":"<p>Anem a veure els distints operadors que solen tindre els llenguatges de programaci\u00f3 i a contruir expressions amb elles, aix\u00ed com la forma d'introduir dades per teclat i mostrar resultats per pantalla.</p>"},{"location":"PRG03/#operadors-aritmetics","title":"Operadors aritm\u00e8tics","text":"<p> Python C i Java Significat Observacions + + Suma - - Resta o signe * * Multiplicaci\u00f3 / / Divisi\u00f3 amb decimals (11/4 -&gt; 2.75) En C i Java: (11/4 -&gt; 2  -- 11/4.0 -&gt; 2.75) // NO Divisi\u00f3 entera (11//4 -&gt; 2) % % Residu divisi\u00f3 entera (21%4 -&gt; 1) ** NO Pot\u00e8ncia (2**3 -&gt; 8) <p></p>"},{"location":"PRG03/#operadors-relacionals","title":"Operadors relacionals","text":"<p> Python C i Java Significat == == Igual != &lt;&gt; != Distint &lt; &lt; Menor &lt;= &lt;= Menor o igual &gt; &gt; Major &gt;= &gt;= Major o igual <p></p> <p>Ja veurem que, principalment, estos operadors s'utilitzen en les condicions de les instruccions if i while.</p> <p>Exemples</p> Python<pre><code>if (nota &gt;= 5):\n    print(\"Aprovat\")\n...\n</code></pre> Python<pre><code>while (edat &lt; 0):\n    print(\"Edat incorrecta. Torna-me-la a dir\")\n...\n</code></pre>"},{"location":"PRG03/#operadors-logics","title":"Operadors l\u00f2gics","text":"<p>Ja vei\u00e9rem al primer tema quins eren els operador l'ogics i com actuaven (recordeu les \"taules de veritat\"). Veiem ara com es representen en Python, C i Java:</p> <p> Python C i Java Significat or || Vertader si algun \u00e9s vertader and &amp;&amp; Vertader si els 2 s\u00f3n vertaders not ! El contrari <p></p> <p>Exemples d'operadors l\u00f2gics</p> Python<pre><code>...\nif edat &gt;= 18 and edat &lt;= 65:\n    print(\"Est\u00e0s en edat de treballar\")\nelse:\n    print(\"No est\u00e0s en edat de treballar\")\n...\n</code></pre> Python<pre><code>...\nwhile nota &lt; 0 or nota &gt; 10:\n    print(\"Nota incorrecta. Torna-la a posar\")\n...\n</code></pre> Python<pre><code>plou = True\nfaSol = False\nprint(plou or faSol)    # True\nprint(plou and faSol)   # False\nprint(not plou)         # False\n</code></pre>"},{"location":"PRG03/#curtcircuit-dexpressions","title":"Curtcircuit d'expressions","text":"<p>Si recordem les taules de veritat, podem afirmar que...</p> <ul> <li>false AND ... --&gt; false</li> <li>true OR ... --&gt; true</li> </ul> <p>Per tant, com les expressions s'avaluen d'esquerra a dreta, en el moment en qu\u00e8 el compilador puga assegurar el valor final de l'expressi\u00f3 l\u00f2gica (True o False), parar\u00e0 d'avaluar-la. Esta manera de treballar s'anomena curtcircuit d'expressions. Aix\u00f2 ens d\u00f3na un benefici pel que fa al control d'errors i a la valocitat d'execuci\u00f3.</p> <p>Exemples</p> <p>Python<pre><code>if (descompte1 &gt; 0 or descompte2 &gt; 0 or descompte3 &gt; 0):\n    print(\"S'aplica algun descompte\")\n</code></pre> Si el <code>descompte1</code>\u00e9s major que <code>0</code>, ja no es comproven les altres 2 expressions i passa a executar-se directament el print.</p> <p>Python<pre><code>(x&lt;0) and print(\"El valor de la variable \u00e9s negatiu\")\n</code></pre> Nom\u00e9s mostrar\u00e0 el text si el valor de x \u00e9s negatiu.</p> <p>Exercici sobre el curtcircuit d'expressions</p> <p>Qu\u00e8 passar\u00e0 en cada cas?</p> Cas A<pre><code>sumaNotes = 50\nquantsAlumnes = 0\nif (quantsAlumnes &gt; 0) and (sumaNotes/quantAlumnes &gt;= 5):\n    print(\"Nota miyjana aprovada\")\nelse:\n    print(\"Nota mitjana no aprovada\")\n</code></pre> Cas B: Mateix programa per\u00f2 amb els seg\u00fcent if en compte de l'anterior<pre><code>if (sumaNotes/quantAlumnes &gt;= 5) and (auntAlumnes &gt; 0)\n</code></pre>"},{"location":"PRG03/#operador-dassignacio","title":"Operador d'assignaci\u00f3","text":"<p>Este operador ja ha aparegut en molts exemples. S'utilitza quan volem emmagatzemar un valor en una variable. En Python i en la majoria de llenguatges de programaci\u00f3, l'operador d'assignaci\u00f3 \u00e9s el s\u00edmbol igual (=).</p> <p> Python C i Java Significat = = Assignaci\u00f3 <p></p> <p></p> <p>\u00c9s a dir: primer s'avalua la part de la dreta, i despr\u00e9s s'assigna eixe resultat a la variable esquerra.</p> <p>Exemple</p> Python<pre><code>x = 10      # x valdr\u00e0 10\ny = 20      # y valdr\u00e0 20\nx = x + 1   # x no valdr\u00e0 10, sin\u00f3 11\ny = x + y   # y no valdr\u00e0 20, sin\u00f3 31\n</code></pre> <p>Per descomptat, l'assignaci\u00f3 \u00e9s destructiva (com es veu a l'exemple): sempre que es fa una assignaci\u00f3 elimina el valor antic de la variable. \u00c9s a dir, nom\u00e9s pot guardar una dada en un moment determinat.</p> <p>Si volem assignar un mateix valor a moltes variables tamb\u00e9 ho podem fer aix\u00ed (tamb\u00e9 en C i Java):</p> Python<pre><code>a = b = c = d = 10\n</code></pre>"},{"location":"PRG03/#operadors-aritmetics-reduits-operadors-aritmetics-i-dassignacio","title":"Operadors aritm\u00e8tics redu\u00efts (operadors aritm\u00e8tics i d'assignaci\u00f3)","text":"<p>L'operador d'assignaci\u00f3 que hem vist (=) assigna un valor a una variable. Per\u00f2 si el que volem fer \u00e9s augmentar (o disminuir) el valor que ja t\u00e9 la variable, podem usar els operadors aritm\u00e8tics redu\u00efts.</p> <p> Python C i Java Significat Assignaci\u00f3 redu\u00efda Assignaci\u00f3 equivalent += += Suma i assignaci\u00f3 x += y x = x + y -= -= Resta i assignaci\u00f3 x -= y x = x - y *= *= Producte i assignaci\u00f3 x *= y x = x * y **= NO Pot\u00e8ncia i assignaci\u00f3 x **= y x = x ** y /= /= Divisi\u00f3 i assignaci\u00f3 x /= y x = x / y %= %= Residu i assignaci\u00f3 x %= y x = x % y //= NO Divisi\u00f3 entera i assignaci\u00f3 x //= y x = x // y NO ++ Autoincrement x++ x = x + 1 NO -- Autodecrement x-- x = x - 1 <p></p> <p>Com veiem, estos dos operadors fan 2 coses: una operaci\u00f3 aritm\u00e8tica i una assignaci\u00f3. Tamb\u00e9 es coneixen com operadors d'actualitzaci\u00f3. En les dos columnes de la dreta, <code>x</code> \u00e9s una variable , i <code>y</code> \u00e9s una expressi\u00f3, constant o variable.</p> <p>Exemple</p> Python<pre><code>y = 1\nx = 4\nx += y      # x = x + y         ---&gt; x = 5\nx *= 2      # x = x * 2         ---&gt; x = 10\nx -= 3 - y  # x = x - (3 - y)   ---&gt; x = 10 - (2)   ---&gt; x = 8\n</code></pre> Exercici 2. Assignacions <p>Al seg\u00fcent programa Python, qu\u00e8 valdr\u00e0 cada variable despr\u00e9s de cada assignaci\u00f3?</p> Python<pre><code>a = 6\nb = 3\nb = 1 + b           # a =       b =\na = a / b           # a =       b =\nb = 6 // b + b      # a =       b =\n</code></pre> Exercici 3 <p>En el seg\u00fcent programa Python, qu\u00e8 valdr\u00e0 cada variable despr\u00e9s de cada assignaci\u00f3?</p> Python<pre><code>a = 4\nb = 20\nb += 23         # a =       b =\nb //= 2         # a =       b =\n</code></pre>"},{"location":"PRG03/#altres-operadors","title":"Altres operadors","text":""},{"location":"PRG03/#el-sizeof","title":"El sizeof","text":"<p>La quantitat de bytes que s'utilitza per a guardar una dada dep\u00e9n del tipus de dades, aix\u00ed com del llenguatge de programaci\u00f3, la varsi\u00f3 del compilador i del tipus de processador que s'utilitze (32 o 64 bits).</p> <p>Per tant, perqu\u00e8 el nostre programa puga ser portable, de vegades \u00e9s necessari saber quants bytes ocupen les variables amb les quals treballarem. Per aix\u00f3 alguns llenguatges tenen una funci\u00f3 per a tal fi:</p> En Python: sys.getsizeof()<pre><code>import sys\nx = 10\ntext = \"10\"\nprint(sys.getsizeof(x), \"bytes\")            # 28 bytes (1)\nprint(sys.getsizeof(text), \"bytes\")         # 51 bytes (2)\nprint(sys.getsizeof(1000), \"bytes\")         # 28 bytes\nprint(sys.getsizeof(\"Hola, Pep\"), \"bytes\")  # 58 bytes\nprint(sys.getsizeof(1234.56789), \"bytes\")   # 24 bytes (3)\n</code></pre> <ol> <li>Qualsevol enter ocupa 28 bytes</li> <li>Quantitat de caracters + 49</li> <li>Un float ocupa 24 bytes</li> </ol>"},{"location":"PRG03/#expressions","title":"Expressions","text":"<p>Ja hem vist les dades i els operadors. Amb ells podem formar expressions.</p> <p>Una expressi\u00f3 \u00e9s una combinaci\u00f3 de dades (operands) i operadors (seguint certes regles de construcci\u00f3) i que poden estar agrupats per par\u00e8ntesi per a indicar l'ordre de c\u00e0lcul.</p> <p>Exemples d'expressions</p> <ul> <li>base * altura / 2</li> <li>(-b + sqrt(b2 - 4ac))/2</li> <li>1000</li> <li>edat &gt;= 0 and edat &lt;= 100</li> <li>cognoms</li> <li>\"Sr.\" + nom + \" \" + cognoms</li> </ul> <p>Llocs on pot apar\u00e9ixer una expressi\u00f3</p> <ul> <li>En una assignaci\u00f3:<ul> <li>area = base * altura / 2</li> <li>total += preu * quantitat</li> </ul> </li> <li>En els par\u00e0metres d'una funci\u00f3:<ul> <li>sqrt(b ** 2 - 4 * a * c)</li> <li>print(\"Sr.\" + nom + \" \" + cognoms)</li> </ul> </li> <li>En una condici\u00f3:<ul> <li>if(edat &lt; 0):</li> <li>while (nota &lt; 0 or nota &gt; 10)</li> </ul> </li> </ul>"},{"location":"PRG03/#el-tipus-de-les-expressions","title":"El tipus de les expressions","text":"<p>Igual que una variable (o una constant) \u00e9s d'un tipus determinat, una expressi\u00f3 tamb\u00e9 t\u00e9 el seu tipus.</p> <p>Per exemple, tenim les variables enteres <code>a</code> i <code>b</code> i la variable float <code>x</code>.</p> <ul> <li>\u00c9s l\u00f2gic pensar que <code>a * b</code> tamb\u00e9 ser\u00e0 entera, i tamb\u00e9 <code>a + b</code>, etc</li> </ul> <p>Ara b\u00e9:</p> <ul> <li>De quin tipus ser\u00e0 una expressi\u00f3 amb operands de diferents tipus: <code>a * x</code>?</li> <li>De quin tipus ser\u00e0 <code>a / b</code>? Enter (sense decimals) o float (amb decimals)?</li> </ul> <p>En eixos casos cada llenguatge de programaci\u00f3 fa una conversi\u00f3 de tipus o promoci\u00f3. Hi ha diferents formes de promoci\u00f3:</p>"},{"location":"PRG03/#promocio-interna","title":"Promoci\u00f3 interna","text":"<p>Si en una expressi\u00f3 hi ha dades amb decimals i sense, el resultat tamb\u00e9 tindr\u00e0 decimals.</p> <p>Per tant, si tenim <code>4 + 2.3</code> el resultat ser\u00e0 <code>6.3</code> (float), no <code>6</code> (int).</p> <p>Esta norma serveix per a tots els llenguatges. Per\u00f2 C i Java tenen m\u00e9s tipus per a representar els n\u00fameros. En estos llenguatges, si una expressi\u00f3 t\u00e9 diferents tipus, l'expressi\u00f3 ser\u00e0 del tipus que ocupa m\u00e9s bytes (per\u00f2 si l'expressi\u00f3 t\u00e9 n\u00fameros decimals, l'expressi\u00f3 ser\u00e0 d'un tipus amb decimals).</p> <p></p>"},{"location":"PRG03/#promocio-per-assignacio","title":"Promoci\u00f3 per assignaci\u00f3","text":"<p>Esta conversi\u00f3 la fa el compilador quan s'intenta assignar a una variable una expressi\u00f3 de diferent tipus.</p> <p></p> Python: la variable passar\u00e0 a ser del tipus de l'expressi\u00f3<pre><code>preu = 3    # Ara preu \u00e9s int (i el seu valor \u00e9s 3)\npreu = 4.6  # Ara preu \u00e9s float (i el seu valor \u00e9s 4.6)\n</code></pre> C, Java: el tipus de la variable no canvia. \u00c9s l'expressi\u00f3 la que canvia al tipus de la variable perqu\u00e8 es fa\u00e7a l'assignaci\u00f3<pre><code>int preu;   // Ara (i en tot el programa) preu ser\u00e0 int\npreu = 3;   // preu ara val 3\npreu = 4.6; // preu ara val 4 i continua sent int (en Python seria 4.6) (1)\n</code></pre> <ol> <li>En este cas diem que s'ha fet una promoci\u00f3 per assignaci\u00f3: el float 4.6 ha \"promocionat\" a l'int 4.</li> </ol>"},{"location":"PRG03/#promocio-forcada-casting","title":"Promoci\u00f3 for\u00e7ada (c\u00e0sting)","text":"<p>El programador pot indicar que una expressi\u00f3 canvie a un tipus en concret. Eixa conversi\u00f3 es diu c\u00e0sting o promoci\u00f3 for\u00e7ada.</p> <p></p>"}]}